var p=Object.defineProperty;var g=(s,t,i)=>t in s?p(s,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):s[t]=i;var o=(s,t,i)=>(g(s,typeof t!="symbol"?t+"":t,i),i);var l=(s=>(s.LEFT="left",s.RIGHT="right",s.BOTH="both",s))(l||{});class C{constructor(){o(this,"audioContext",null);o(this,"oscillator",null);o(this,"gainNode",null);o(this,"calibrationValues",new Map);o(this,"boneCalibrationValues",new Map);o(this,"panNode",null);o(this,"currentFrequency",0);o(this,"debugMode",!0);o(this,"pulseInterval",null);o(this,"pulseDuration",200);o(this,"pauseDuration",200);this.initializeAudioContext(),this.setupCalibration()}initializeAudioContext(){try{this.audioContext=new(window.AudioContext||window.webkitAudioContext)}catch(t){console.error("Web Audio API is not supported in this browser",t)}}setupCalibration(){[125,250,500,750,1e3,1500,2e3,3e3,4e3,6e3,8e3].forEach(i=>{this.calibrationValues.set(i,1),i>=250&&i<=4e3&&this.boneCalibrationValues.set(i,.8)})}dBToAmplitude(t,i,a=!1){if(t<0)return 1e-4*Math.pow(10,t/20);let e=1e-4*Math.pow(10,t/20);if(a){const n=this.boneCalibrationValues.get(i)||.8;e*=n}else{const n=this.calibrationValues.get(i)||1;e*=n}return e}playTone(t,i,a,e=1e3,n="air",d=!1){if(d){this.playPulsedTone(t,i,a,n);return}if(this.audioContext||this.initializeAudioContext(),!this.audioContext){console.error("Could not initialize AudioContext");return}this.resumeAudioContext(),this.destroyAllAudioNodes(),this.currentFrequency=t;let r;n==="bone"||n==="masked_bone"?r=this.dBToAmplitude(i,t,!0):r=this.dBToAmplitude(i,t),this.oscillator=this.audioContext.createOscillator(),this.gainNode=this.audioContext.createGain(),this.panNode=this.audioContext.createStereoPanner(),this.oscillator.type=this.getBoneOscillatorType(n),this.oscillator.frequency.value=t,this.setPan(a),(n==="bone"||n==="masked_bone")&&this.applyBoneConductionEffect(),this.gainNode.gain.value=0,this.oscillator.connect(this.gainNode),this.gainNode.connect(this.panNode),this.panNode.connect(this.audioContext.destination),this.oscillator.start();const u=this.audioContext.currentTime,h=.02,c=.02;this.gainNode.gain.linearRampToValueAtTime(r,u+h),this.gainNode.gain.setValueAtTime(r,u+h+e/1e3-c),this.gainNode.gain.linearRampToValueAtTime(0,u+h+e/1e3),this.oscillator.stop(u+h+e/1e3+.1),this.debugMode&&console.log(`Playing ${n} tone: ${t}Hz at ${i}dB HL to ${a} ear for ${e}ms`)}getBoneOscillatorType(t){return t==="bone"||t==="masked_bone"?"triangle":"sine"}applyBoneConductionEffect(){if(!this.audioContext||!this.gainNode)return;const t=this.audioContext.createBiquadFilter();t.type="lowpass",t.frequency.value=2e3,t.Q.value=.5,this.oscillator&&this.gainNode&&(this.oscillator.disconnect(),this.oscillator.connect(t),t.connect(this.gainNode))}stopTone(){this.pulseInterval!==null&&(clearInterval(this.pulseInterval),this.pulseInterval=null);const t=this.currentFrequency;this.destroyAllAudioNodes(),this.debugMode&&console.log(`ðŸ›‘ Stopped tone at ${t}Hz`)}destroyAllAudioNodes(){if(this.oscillator){try{this.oscillator.stop(0)}catch{}try{this.oscillator.disconnect()}catch{}this.oscillator=null}if(this.gainNode){try{this.gainNode.disconnect()}catch{}this.gainNode=null}if(this.panNode){try{this.panNode.disconnect()}catch{}this.panNode=null}}resumeAudioContext(){return this.audioContext&&this.audioContext.state==="suspended"?this.audioContext.resume():Promise.resolve()}setPan(t){if(this.panNode)switch(t){case l.LEFT:this.panNode.pan.value=-1;break;case l.RIGHT:this.panNode.pan.value=1;break;case l.BOTH:default:this.panNode.pan.value=0;break}}playMaskingNoise(t,i=l.BOTH){console.log(`Playing masking noise at ${t} dB HL to ${i} ear`)}stopMaskingNoise(){console.log("Stopping masking noise")}playPulsedTone(t,i,a,e="air"){this.stopTone(),this.currentFrequency=t,this.playTone(t,i,a,this.pulseDuration,e),this.pulseInterval=window.setInterval(()=>{this.playTone(t,i,a,this.pulseDuration,e)},this.pulseDuration+this.pauseDuration),this.debugMode&&console.log(`Playing pulsed ${e} tone: ${t}Hz at ${i}dB HL to ${a} ear`)}setPulseTiming(t,i){this.pulseDuration=t,this.pauseDuration=i,this.debugMode&&console.log(`Pulse timing set: ${t}ms on, ${i}ms off`)}dispose(){this.stopTone(),this.stopMaskingNoise(),this.audioContext&&(this.audioContext.close(),this.audioContext=null)}}const N=new C;export{N as a};
