var it=Object.defineProperty,lt=Object.defineProperties;var at=Object.getOwnPropertyDescriptors;var ce=Object.getOwnPropertySymbols;var ke=Object.prototype.hasOwnProperty,$e=Object.prototype.propertyIsEnumerable;var me=(r,t,s)=>t in r?it(r,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):r[t]=s,P=(r,t)=>{for(var s in t||(t={}))ke.call(t,s)&&me(r,s,t[s]);if(ce)for(var s of ce(t))$e.call(t,s)&&me(r,s,t[s]);return r},Q=(r,t)=>lt(r,at(t));var Ie=(r,t)=>{var s={};for(var o in r)ke.call(r,o)&&t.indexOf(o)<0&&(s[o]=r[o]);if(r!=null&&ce)for(var o of ce(r))t.indexOf(o)<0&&$e.call(r,o)&&(s[o]=r[o]);return s};var O=(r,t,s)=>(me(r,typeof t!="symbol"?t+"":t,s),s);var Re=(r,t,s)=>new Promise((o,n)=>{var l=h=>{try{c(s.next(h))}catch(y){n(y)}},d=h=>{try{c(s.throw(h))}catch(y){n(y)}},c=h=>h.done?o(h.value):Promise.resolve(h.value).then(l,d);c((s=s.apply(r,t)).next())});import{j as e,r as T,k as Fe,_ as Pe}from"./react-vendor-Dgc981fj.js";import{u as le,b as Ne,Y as ct,Z as dt,B as j,n as ht,d as S,at as Y,_ as ut,m as R,U as H,au as Oe,av as Se,aw as pt,a1 as Z,I as oe,a8 as Te,a7 as Le,ax as gt,ag as ft,R as E,ay as xt,V as Ce,az as Ye,X as K,aA as ae,H as mt,S as yt,aB as _e,al as Ve,aC as Ue,L as bt,e as vt,f as jt,$ as St,h as Tt,D as he,a2 as ee,aD as Lt,aE as wt,w as Ct,aF as Bt,ai as qt,aG as kt,aH as Je,aI as Xe,aJ as Ge,aa as ue,ab as we,ac as U,ad as k,ae as pe,aK as Qe,aL as ze,E as $t,aM as It,aN as ye,a9 as Ee,aO as be,aP as Ke,aQ as Rt,aR as zt,aS as Et,aT as Dt,aU as Ht,z as ve,aV as Wt,aW as At,aX as Mt,aY as Ft,Q as De,aZ as Pt,F as He,a_ as We,a$ as Ae,p as J,b0 as Nt}from"./mui-BPTcmYo2.js";import{a as ie}from"./AudioService-Cp4gMZrB.js";import{Y as Ot,Z as Yt,$ as _t}from"./vendor-QrZtzWVC.js";import"./three-CboCXHlv.js";class Vt{constructor(){O(this,"patients",[]);this.initializePatients()}initializePatients(){this.patients=[{id:"patient1",name:"Alex Johnson",description:"Young adult with normal hearing",difficulty:"beginner",hearingLossType:"normal",thresholds:this.generateNormalHearingThresholds()},{id:"patient2",name:"Sarah Miller",description:"Middle-aged with mild high-frequency sensorineural hearing loss",difficulty:"beginner",hearingLossType:"sensorineural",thresholds:this.generateMildHighFrequencyLoss()},{id:"patient3",name:"Robert Chen",description:"Adult with moderate flat conductive hearing loss",difficulty:"intermediate",hearingLossType:"conductive",thresholds:this.generateConductiveLoss()},{id:"patient4",name:"Maria Garcia",description:"Elderly with asymmetrical sensorineural hearing loss",difficulty:"intermediate",hearingLossType:"asymmetrical",thresholds:this.generateAsymmetricalLoss()},{id:"patient5",name:"James Wilson",description:"Adult with mixed hearing loss",difficulty:"advanced",hearingLossType:"mixed",thresholds:this.generateMixedLoss()},{id:"patient6",name:"Eliza Thompson",description:"Child with severe-profound sensorineural hearing loss",difficulty:"advanced",hearingLossType:"sensorineural",thresholds:this.generateSevereProfoundLoss()}]}generateNormalHearingThresholds(){const t=[];return[250,500,750,1e3,1500,2e3,3e3,4e3,6e3,8e3].forEach(n=>{t.push({frequency:n,hearingLevel:this.getRandomLevel(-10,15),ear:"right",testType:"air",responseStatus:"threshold"}),t.push({frequency:n,hearingLevel:this.getRandomLevel(-10,15),ear:"left",testType:"air",responseStatus:"threshold"})}),[250,500,1e3,2e3,3e3,4e3].forEach(n=>{t.push({frequency:n,hearingLevel:this.getRandomLevel(-10,15),ear:"right",testType:"bone",responseStatus:"threshold"}),t.push({frequency:n,hearingLevel:this.getRandomLevel(-10,15),ear:"left",testType:"bone",responseStatus:"threshold"})}),t}generateMildHighFrequencyLoss(){const t=[];return[250,500,750,1e3,1500,2e3,3e3,4e3,6e3,8e3].forEach(n=>{let l=10,d=10;n>=2e3&&(l=Math.min(85,10+Math.round((n-1500)/100)),d=Math.min(85,10+Math.round((n-1500)/100))),l=l+this.getRandomLevel(-5,5),d=d+this.getRandomLevel(-5,5),t.push({frequency:n,hearingLevel:l,ear:"right",testType:"air",responseStatus:"threshold"}),t.push({frequency:n,hearingLevel:d,ear:"left",testType:"air",responseStatus:"threshold"})}),[250,500,1e3,2e3,3e3,4e3].forEach(n=>{let l=10,d=10;n>=2e3&&(l=Math.min(85,10+Math.round((n-1500)/100)),d=Math.min(85,10+Math.round((n-1500)/100))),l=l+this.getRandomLevel(-5,5),d=d+this.getRandomLevel(-5,5),t.push({frequency:n,hearingLevel:l,ear:"right",testType:"bone",responseStatus:"threshold"}),t.push({frequency:n,hearingLevel:d,ear:"left",testType:"bone",responseStatus:"threshold"})}),t}generateConductiveLoss(){const t=[];return[250,500,750,1e3,1500,2e3,3e3,4e3,6e3,8e3].forEach(n=>{const l=40+this.getRandomLevel(0,15),d=40+this.getRandomLevel(0,15);t.push({frequency:n,hearingLevel:l,ear:"right",testType:"air",responseStatus:"threshold"}),t.push({frequency:n,hearingLevel:d,ear:"left",testType:"air",responseStatus:"threshold"})}),[250,500,1e3,2e3,3e3,4e3].forEach(n=>{const l=this.getRandomLevel(-10,15),d=this.getRandomLevel(-10,15);t.push({frequency:n,hearingLevel:l,ear:"right",testType:"bone",responseStatus:"threshold"}),t.push({frequency:n,hearingLevel:d,ear:"left",testType:"bone",responseStatus:"threshold"})}),t}generateAsymmetricalLoss(){const t=[250,500,750,1e3,1500,2e3,3e3,4e3,6e3,8e3],s=[];return t.forEach(o=>{let n;o<=1e3?n=this.getRandomLevel(15,25):n=this.getRandomLevel(30,45);let l;o<=1e3?l=this.getRandomLevel(40,55):l=this.getRandomLevel(60,75),s.push({frequency:o,hearingLevel:n,ear:"right",testType:"air",responseStatus:"threshold"}),s.push({frequency:o,hearingLevel:l,ear:"left",testType:"air",responseStatus:"threshold"}),o<=4e3&&(s.push({frequency:o,hearingLevel:n,ear:"right",testType:"bone",responseStatus:"threshold"}),s.push({frequency:o,hearingLevel:l,ear:"left",testType:"bone",responseStatus:"threshold"}))}),s}generateMixedLoss(){const t=[250,500,750,1e3,1500,2e3,3e3,4e3,6e3,8e3],s=[],o=25;return t.forEach(n=>{let l,d;n<=1e3?(l=this.getRandomLevel(20,30),d=this.getRandomLevel(20,30)):(l=this.getRandomLevel(40,55),d=this.getRandomLevel(40,55));const c=l+o,h=d+o;s.push({frequency:n,hearingLevel:c,ear:"right",testType:"air",responseStatus:"threshold"}),s.push({frequency:n,hearingLevel:h,ear:"left",testType:"air",responseStatus:"threshold"}),n<=4e3&&(s.push({frequency:n,hearingLevel:l,ear:"right",testType:"bone",responseStatus:"threshold"}),s.push({frequency:n,hearingLevel:d,ear:"left",testType:"bone",responseStatus:"threshold"}))}),s}generateSevereProfoundLoss(){const t=[250,500,750,1e3,1500,2e3,3e3,4e3,6e3,8e3],s=[];return t.forEach(o=>{const n=this.getRandomLevel(80,110),l=this.getRandomLevel(80,110);s.push({frequency:o,hearingLevel:n,ear:"right",testType:"air",responseStatus:"threshold"}),s.push({frequency:o,hearingLevel:l,ear:"left",testType:"air",responseStatus:"threshold"}),o<=4e3&&(s.push({frequency:o,hearingLevel:n,ear:"right",testType:"bone",responseStatus:o<=1e3?"threshold":"no_response"}),s.push({frequency:o,hearingLevel:l,ear:"left",testType:"bone",responseStatus:o<=1e3?"threshold":"no_response"}))}),s}getRandomLevel(t,s){t=Math.max(5,t);const o=Math.round((Math.random()*(s-t)+t)/5)*5;return Math.min(120,Math.max(5,o))}getAllPatients(){return[...this.patients]}getPatientById(t){return this.patients.find(s=>s.id===t)}getPatientsByDifficulty(t){return this.patients.filter(s=>s.difficulty===t)}getPatientsByType(t){return this.patients.filter(s=>s.hearingLossType===t)}}const Be=new Vt,Ut={beginner:"success",intermediate:"warning",advanced:"error"},Jt={normal:"success",conductive:"info",sensorineural:"warning",mixed:"error",asymmetrical:"secondary"},Xt=r=>r.split(" ").map(t=>t.charAt(0)).join("").toUpperCase(),Gt=({patient:r,onSelect:t,selected:s=!1})=>{const o=le(),n=Ne(o.breakpoints.down("sm"));return e.jsxs(ct,{elevation:s?8:3,sx:{maxWidth:"100%",transition:"all 0.3s ease",transform:s?"scale(1.02)":"scale(1)",border:s?"2px solid #3f51b5":"none",height:"100%",display:"flex",flexDirection:"column"},children:[e.jsxs(dt,{sx:{flexGrow:1,p:{xs:1.5,sm:2}},children:[e.jsxs(j,{sx:{display:"flex",flexDirection:{xs:"column",sm:"row"},alignItems:{xs:"center",sm:"flex-start"},mb:2},children:[e.jsx(ht,{sx:{bgcolor:s?"#3f51b5":"#9c27b0",width:{xs:48,sm:56},height:{xs:48,sm:56},mr:{xs:0,sm:2},mb:{xs:1,sm:0}},children:Xt(r.name)}),e.jsxs(j,{sx:{width:"100%",textAlign:{xs:"center",sm:"left"}},children:[e.jsx(S,{variant:"h6",component:"div",gutterBottom:!0,children:r.name}),e.jsxs(j,{sx:{display:"flex",gap:1,flexWrap:"wrap",justifyContent:{xs:"center",sm:"flex-start"}},children:[e.jsx(Y,{label:r.difficulty,size:"small",color:Ut[r.difficulty]}),e.jsx(Y,{label:r.hearingLossType.replace("_"," "),size:"small",color:Jt[r.hearingLossType]})]})]})]}),e.jsx(S,{variant:"body2",color:"text.secondary",paragraph:!0,sx:{textAlign:{xs:"center",sm:"left"}},children:r.description}),e.jsxs(j,{sx:{display:"flex",flexDirection:{xs:"column",sm:"row"},justifyContent:"space-between",gap:1},children:[e.jsxs(S,{variant:"body2",color:"text.secondary",children:[e.jsx("strong",{children:"Profile ID:"})," ",r.id]}),e.jsxs(S,{variant:"body2",color:"text.secondary",children:[e.jsx("strong",{children:"Thresholds:"})," ",r.thresholds.length," data points"]})]})]}),e.jsx(ut,{sx:{p:{xs:1,sm:1.5}},children:e.jsx(R,{size:n?"medium":"small",variant:s?"contained":"outlined",color:"primary",onClick:()=>t(r),fullWidth:!0,children:s?"Selected":"Select Patient"})})]})};class Qt{constructor(){O(this,"currentSession",null);O(this,"activeSessions",[]);O(this,"completedSessions",[]);O(this,"falsePositiveCount",0);O(this,"testFrequencies",[250,500,750,1e3,1500,2e3,3e3,4e3,6e3,8e3]);O(this,"boneTestFrequencies",[500,1e3,2e3,4e3]);O(this,"testTypes",["air","bone"]);O(this,"defaultStartLevel",40);O(this,"initialStepSize",10);O(this,"finalStepSize",5);O(this,"includeBoneConduction",!0);O(this,"includeAirConduction",!0)}startSession(t,s){s&&(s.includeAirConduction!==void 0&&(this.includeAirConduction=s.includeAirConduction),s.includeBoneConduction!==void 0&&(this.includeBoneConduction=s.includeBoneConduction));const o=this.generateTestSequence(),n={id:Ot(),startTime:new Date().toISOString(),patientId:t.id,completed:!1,testSequence:o,currentStep:0};return this.currentSession=n,this.activeSessions.push(n),n}generateTestSequence(){const t=[];let s=1;return[{ear:"right",testType:"air"},{ear:"left",testType:"air"},{ear:"right",testType:"bone"},{ear:"left",testType:"bone"}].forEach(({ear:n,testType:l})=>{if(l==="bone"&&!this.includeBoneConduction||l==="air"&&!this.includeAirConduction)return;const d=l==="bone"?this.boneTestFrequencies:this.testFrequencies,c=[],h=d.indexOf(1e3);if(h!==-1){c.push(1e3);for(let y=h+1;y<d.length;y++)c.push(d[y]);c.push(1e3);for(let y=h-1;y>=0;y--)c.push(d[y])}else c.push(...d);c.forEach(y=>{t.push({id:s++,frequency:y,ear:n,testType:l,currentLevel:this.defaultStartLevel,completed:!1,responses:[]})})}),t}getCurrentStep(){if(!this.currentSession)return null;const{currentStep:t,testSequence:s}=this.currentSession;return t>=s.length?null:s[t]}playCurrentTone(t,s=!0){const o=this.getCurrentStep();if(!o)return;const{frequency:n,ear:l,currentLevel:d,testType:c}=o;ie.playTone(n,d,l,t,c,s)}recordResponse(t){if(!this.currentSession)return null;const s=this.getCurrentStep();return s?(s.responses.push({level:s.currentLevel,response:t}),this.adjustLevelPerProtocol(s,t),s):null}recordResponseWithoutAdjustment(t){if(!this.currentSession)return null;const s=this.getCurrentStep();return s?(s.responses.push({level:s.currentLevel,response:t}),s):null}setCurrentLevel(t){if(!this.currentSession)return null;const s=this.getCurrentStep();if(!s)return null;const o=s.frequency,n=s.ear;return console.log(`TestingService: Setting level for frequency ${o}Hz, ${n} ear to ${t}dB`),s.currentLevel=t,s}adjustLevelPerProtocol(t,s){const{responses:o}=t;if(s)t.currentLevel=Math.max(-10,t.currentLevel-10),console.log(`Patient responded: Decreasing by 10 dB to ${t.currentLevel} dB (Hughson-Westlake protocol)`);else{const n=o.length<2,l=n?this.initialStepSize:this.finalStepSize;t.currentLevel=Math.min(120,t.currentLevel+l),console.log(`No response: Increasing by ${l} dB to ${t.currentLevel} dB (${n?"Initial phase":"Bracketing phase"})`)}this.isThresholdEstablished(t)&&(t.completed=!0,this.moveToNextStep())}determineStepSize(t){const{responses:s}=t;return s.length<2?this.initialStepSize:this.finalStepSize}isThresholdEstablished(t){const{responses:s}=t;if(s.length<3)return!1;const o=new Map;s.forEach(d=>{const c=d.level,h=o.get(c)||{total:0,heard:0};h.total+=1,d.response&&(h.heard+=1),o.set(c,h)});let n=!1,l=null;return o.forEach((d,c)=>{d.total>=3&&d.heard>=2&&(!n||l!==null&&c<l)&&(n=!0,l=c,console.log(`Threshold identified at ${c} dB with ${d.heard}/${d.total} responses`))}),n&&console.log(`Final threshold established at ${l} dB`),n}moveToNextStep(){if(!this.currentSession)return;const t=this.getCurrentStep();t&&(console.log(`Completing step at level: ${t.currentLevel}dB before moving to next step`),console.log(`Step completed status: ${t.completed}, responseStatus: ${t.responseStatus||"not set"}`)),this.currentSession.currentStep+=1,this.currentSession.currentStep>=this.currentSession.testSequence.length&&this.completeSession()}skipCurrentStep(t=!1){var o;if(console.log("=== Debug: skipCurrentStep called with markCompleted =",t),!this.currentSession)return console.log("=== Debug: skipCurrentStep - no current session"),null;const s=this.getCurrentStep();if(s){t?(console.log(`Marking step as completed with threshold at: ${s.currentLevel}dB`),s.completed=!0,s.responseStatus||(s.responseStatus="threshold")):console.log("Skipping to next step without marking current step as completed");const n=this.currentSession.currentStep;this.moveToNextStep();const l=this.currentSession.currentStep;console.log(`=== Debug: skipCurrentStep - moved from step ${n} to ${l}`),console.log(`=== Debug: session has ${this.currentSession.testSequence.length} total steps`),console.log(`=== Debug: returning new step with frequency ${((o=this.getCurrentStep())==null?void 0:o.frequency)||"null"}`)}else console.log("=== Debug: skipCurrentStep - no current step found");return this.getCurrentStep()}completeSession(){var l,d;if(!this.currentSession)return null;const t=this.currentSession;t.completed=!0;const s=t.patientId,o=Be.getPatientById(s),n=this.calculateResults(t,(o==null?void 0:o.thresholds)||[]);return t.results=n,console.log("Completing test session with results:",{sessionId:t.id,userThresholds:((l=n.userThresholds)==null?void 0:l.length)||0,actualThresholds:((d=n.actualThresholds)==null?void 0:d.length)||0}),this.completedSessions.push(t),this.activeSessions=this.activeSessions.filter(c=>c.id!==t.id),this.currentSession=null,t}calculateResults(t,s=[]){const o=this.extractThresholds(t);let n=0,l=0;o.forEach(h=>{const y=s.find(f=>f.frequency===h.frequency&&f.ear===h.ear&&f.testType===h.testType&&f.responseStatus==="threshold"&&h.responseStatus==="threshold");if(y){const f=Math.abs(h.hearingLevel-y.hearingLevel);f<=5?n+=100-f*5:f<=10?n+=50:n+=25,l++}});const d=l>0?Math.round(n/l):0,c={patientId:t.patientId,timestamp:new Date().toISOString(),userThresholds:o,actualThresholds:s,accuracy:d,testDuration:this.calculateTestDuration(t),technicalErrors:this.identifyTechnicalErrors(t),falsePositives:this.falsePositiveCount};return this.falsePositiveCount=0,c}extractThresholds(t){const s=[];return t.testSequence.forEach(o=>{if(o.completed&&o.responses.length>0){const n=new Map;o.responses.forEach(h=>{const y=h.level,f=n.get(y)||{total:0,heard:0};f.total+=1,h.response&&(f.heard+=1),n.set(y,f)});let l=null,d=1/0;n.forEach((h,y)=>{h.total>=3&&h.heard>=2&&y<d&&(d=y,l=y)});const c=l!==null?l:o.currentLevel;console.log(`Extracting threshold for completed step: ${c}dB (was ${o.currentLevel}dB)`),s.push({frequency:o.frequency,hearingLevel:c,ear:o.ear,testType:o.testType,responseStatus:"threshold"})}else if(o.responses.length>0){console.log(`Extracting threshold data for incomplete step with ${o.responses.length} responses`);const n=new Map;o.responses.forEach(c=>{if(c.response){const h=n.get(c.level)||0;n.set(c.level,h+1)}});let l=null,d=1/0;if(n.forEach((c,h)=>{c>=2&&h<d&&(d=h,l=h)}),l!==null)console.log(`Found valid threshold in incomplete step at: ${l}dB`),s.push({frequency:o.frequency,hearingLevel:l,ear:o.ear,testType:o.testType,responseStatus:"threshold"});else if(o.responses.length>0){const c=Math.max(...o.responses.map(h=>h.level));console.log(`No valid threshold found, using highest level: ${c}dB`),s.push({frequency:o.frequency,hearingLevel:c,ear:o.ear,testType:o.testType,responseStatus:"no_response"})}}else s.push({frequency:o.frequency,hearingLevel:0,ear:o.ear,testType:o.testType,responseStatus:"not_tested"})}),s}calculateTestDuration(t){const s=new Date(t.startTime).getTime(),o=new Date().getTime();return Math.round((o-s)/1e3)}identifyTechnicalErrors(t){const s=[],o=t.testSequence.filter(n=>!n.completed);return o.length>0&&s.push(`Skipped ${o.length} test frequencies`),t.testSequence.forEach(n=>{n.completed&&n.responses.length<3&&s.push(`Insufficient responses for ${n.frequency} Hz in ${n.ear} ear`)}),t.testSequence.forEach(n=>{n.responses.length>0&&n.responses[0].level>60&&s.push(`Starting level too high for ${n.frequency} Hz in ${n.ear} ear`)}),s}getCurrentSession(){return this.currentSession}getActiveSessions(){return[...this.activeSessions]}getCompletedSessions(){return[...this.completedSessions]}getSessionById(t){return this.activeSessions.find(s=>s.id===t)||this.completedSessions.find(s=>s.id===t)||null}clearAllSessions(){this.activeSessions=[],this.completedSessions=[],this.currentSession=null}calculateProgress(){if(!this.currentSession)return 0;const t=this.currentSession.testSequence.length;if(t===0)return 0;const s=this.currentSession.testSequence.filter(n=>n.completed&&n.responseStatus==="threshold").length;console.log("Progress calculation:",{totalSteps:t,completedSteps:s,completedThresholdSteps:this.currentSession.testSequence.filter(n=>n.completed&&n.responseStatus==="threshold").map(n=>({id:n.id,frequency:n.frequency,ear:n.ear,level:n.currentLevel,responseStatus:n.responseStatus})),allCompletedSteps:this.currentSession.testSequence.filter(n=>n.completed).map(n=>({id:n.id,frequency:n.frequency,ear:n.ear,level:n.currentLevel,responseStatus:n.responseStatus||"none"}))});const o=Math.round(s/t*100);return console.log(`Progress: ${s}/${t} steps completed (${o}%)`),o}completeCurrentStep(t){if(!this.currentSession||this.currentSession.currentStep===void 0)return console.error("Cannot complete step: No current session or step"),!1;const s=this.currentSession.currentStep;return s<0||s>=this.currentSession.testSequence.length?(console.error(`Invalid step index: ${s}`),!1):(this.currentSession.testSequence[s].completed=!0,this.currentSession.testSequence[s].responseStatus=t,console.log(`Marked step ${s} as completed with responseStatus='${t}'`),!0)}recordFalsePositive(){this.falsePositiveCount++,console.log(`False positive recorded. Total: ${this.falsePositiveCount}`)}}const z=new Qt,Kt=(r,t)=>{if(!t)return r;const s=JSON.parse(JSON.stringify(r)),o=t.testSequence.filter(n=>n.completed&&n.responseStatus==="threshold");return console.log(`Preserving ${o.length} thresholds from current session:`,o.map(n=>`${n.frequency}Hz ${n.ear} ear at ${n.currentLevel}dB`).join(", ")),o.length>0&&o.forEach(n=>{const l=s.testSequence.findIndex(d=>d.frequency===n.frequency&&d.ear===n.ear&&d.testType===n.testType);l!==-1&&(s.testSequence[l]=Q(P({},s.testSequence[l]),{completed:!0,responseStatus:"threshold",currentLevel:n.currentLevel}))}),s},Me=(r,t)=>{if(!r)return!1;const s=t.find(d=>d.frequency===r.frequency&&d.ear===r.ear&&d.testType===r.testType);if(!s)return!1;const o=Math.floor(Math.random()*10)-5,n=s.hearingLevel+o,l=Math.max(5,n);return r.currentLevel>=l},Zt=r=>{if(!r)return[];const t=r.testSequence.filter(n=>n.completed&&n.responseStatus==="threshold");console.log(`Extracting thresholds from session - found ${t.length} completed steps with thresholds`),console.log("Completed steps with responseStatus=threshold:",t);const s=new Map;t.forEach(n=>{const l=`${n.frequency}-${n.ear}-${n.testType||"air"}`,d={frequency:n.frequency,hearingLevel:n.currentLevel,ear:n.ear,testType:n.testType||"air",responseStatus:"threshold"};console.log(`Adding threshold: ${n.frequency}Hz, ${n.ear} ear, ${n.currentLevel}dB HL, key=${l}`),s.set(l,d)});const o=Array.from(s.values());return console.log(`Extracted ${o.length} unique thresholds:`,o),o},es=(r,t,s,o,n,l,d)=>{if(!t)return console.log("Cannot update trainer state: currentStep is falsy"),{procedurePhase:s,suggestedAction:"present",guidance:"No current step available",lastResponseLevel:null,responseCounts:o};console.log("🔍 Processing response:",r,"in phase:",s);let c=P({},o),h=s,y="present",f="",C=null;if(r){if(console.log("Patient responded - updating state"),s==="initial")h="descending",y="decrease",f="The patient responded at this level. According to Hughson-Westlake, the next step would be to decrease by 10 dB and present the tone again.",console.log("Initial phase - patient responded, changing to descending phase");else if(s==="descending")h="descending",y="decrease",f="The patient can still hear at this level. In the descending phase, you should continue to decrease by 10 dB intervals.",console.log("Descending phase - patient responded, suggesting continue decreasing");else if(s==="ascending"){h="threshold";const x=t.currentLevel,b=t.frequency,m=t.ear;c[b]||(c[b]={}),c[b][m]||(c[b][m]={}),c[b][m][x]||(c[b][m][x]={total:0,heard:0}),C=x,y="decrease",f=`You've found the potential threshold! The patient responded at ${x} dB. According to Hughson-Westlake protocol, you must immediately decrease by 10 dB and begin the bracketing pattern (10 dB down after response, 5 dB up after no response).`,console.log(`Ascending phase - patient responded at ${x}dB, changed to threshold phase, starting bracketing pattern`)}else if(s==="threshold"){const x=t.currentLevel,b=t.frequency,m=t.ear;c[b]||(c[b]={}),c[b][m]||(c[b][m]={}),c[b][m][x]||(c[b][m][x]={total:0,heard:0}),c[b][m][x].total+=1,c[b][m][x].heard+=1,console.log(`Threshold phase - adding response at ${x}dB for ${b}Hz, ${m} ear: ${c[b][m][x].heard}/${c[b][m][x].total} responses`),C=x;const u=c[b][m][x].heard,i=c[b][m][x].total;n&&l>n?(console.log(`🔢 Current responses at ${x}dB: ${u}/${i}`),console.log(`⏰ Presentation time: ${l}, Threshold phase start: ${n}`),l>d?(y="decrease",i>=2?u>=2?(console.log(`✅ Threshold CONFIRMED at ${x}dB with ${u}/${i} responses.`),h="complete",y="store_threshold",f=`Excellent! You have established a threshold at ${x} dB. The patient has responded ${u} times out of ${i} at this level, which meets the criteria of "2 out of 3" responses needed to establish a threshold. You can now store this value and move to the next frequency.`):(console.log(`❌ Threshold NOT confirmed at ${x}dB with only ${u}/${i} responses.`),y="decrease",f=`The patient responded, but has only ${u} total responses out of ${i} at ${x} dB. Following Hughson-Westlake protocol, decrease by 10 dB after ANY response, then continue testing.`):u>=2?(console.log(`👍 Already have ${u} positive responses at ${x}dB, need more presentations for confirmation.`),y="decrease",f=`Good! The patient has responded ${u} times at ${x} dB. Following Hughson-Westlake protocol, decrease by 10 dB after EACH response, then continue the bracketing pattern.`):i===2&&u===1?(console.log(`⏳ Have 1 out of 2 responses at ${x}dB, continuing bracketing.`),y="decrease",f=`The patient has responded once out of ${i} presentations at ${x} dB. Following Hughson-Westlake protocol, decrease by 10 dB after EACH response, then continue the bracketing pattern.`):(console.log(`⏳ Starting bracketing at ${x}dB (have ${u}/${i}, need at least 2/3)`),y="decrease",f=`The patient has responded ${u} time(s) out of ${i} at ${x} dB. Following Hughson-Westlake protocol, decrease by 10 dB after EACH response, then continue the bracketing pattern.`)):console.log(`⚠️ Double counting prevented! This presentation (${l}) was already processed.`)):(console.log("⚠️ Ignoring response from before threshold phase started in updateTrainerState"),console.log(`⏰ Presentation time: ${l}, Threshold phase start: ${n}`))}}else if(console.log("Patient did NOT respond - updating state"),s==="initial")y="increase",f="The patient did not respond to the initial presentation. This suggests the starting level was too low. Increase the level by 10-15 dB and try again.",console.log("Initial phase - no response, suggest increasing");else if(s==="descending")h="ascending",y="increase",f="The patient no longer responds at this level. This means we've gone below their threshold. Now switch to the ascending phase: increase by 5 dB steps until the patient responds again. Note that we use smaller steps (5 dB) when ascending to more precisely determine the threshold.",console.log("Descending phase - no response, changing to ascending phase");else if(s==="threshold"){const x=t.currentLevel,b=t.frequency,m=t.ear;c[b]||(c[b]={}),c[b][m]||(c[b][m]={}),c[b][m][x]||(c[b][m][x]={total:0,heard:0}),c[b][m][x].total+=1;const u=c[t.frequency][t.ear][x].heard,i=c[t.frequency][t.ear][x].total;console.log(`🔢 Current responses at ${x}dB: ${u}/${i}`),i>=2&&u>=2?(console.log(`✅ Threshold CONFIRMED at ${x}dB with ${u}/${i} responses, despite this no-response.`),h="complete",y="store_threshold",f=`You have established a threshold at ${x} dB. The patient has responded ${u} times out of ${i} at this level, which meets the criteria of "2 out of 3" responses needed to establish a threshold. You can now store this value and move to the next frequency.`):i>=2&&u<2?(console.log(`❌ Level ${x}dB is below threshold with only ${u}/${i} positive responses.`),y="increase",f=`The patient did not respond at ${x} dB (${u}/${i} responses). Following Hughson-Westlake protocol, increase by 5 dB and continue the bracketing pattern.`):i-u>=2?(console.log(`👎 Already have ${i-u} negative responses at ${x}dB, suggesting to increase.`),y="increase",f=`The patient has failed to respond ${i-u} times out of ${i} at ${x} dB. Following Hughson-Westlake protocol, increase by 5 dB and continue the bracketing pattern.`):(y="increase",f=`Patient did not respond at ${x} dB (${u}/${i} responses so far). Following Hughson-Westlake protocol, increase by 5 dB and continue the bracketing pattern.`)}else s==="ascending"&&(h="ascending",y="increase",f="Patient still doesn't respond at this level. Continue to increase by 5 dB steps until you get a response. Remember, we use smaller 5 dB steps during the ascending phase for more precise threshold determination.",console.log("Ascending phase - no response, continue ascending"));return{procedurePhase:h,suggestedAction:y,guidance:f,lastResponseLevel:C,responseCounts:c}};function ts({currentStep:r,toneActive:t,setToneActive:s,patientResponse:o,setPatientResponse:n,setShowResponseIndicator:l,setPatientJustResponded:d,lastPresentationTimeRef:c,lastProcessedPresentationRef:h,thresholdPhaseStartTime:y,updateTrainerState:f,patientThresholds:C}){const x=T.useCallback(()=>{if(r)try{if(console.log("🎵 Starting tone..."),ie.stopTone(),r){const i=r.frequency;console.log(`🔊 Explicit frequency check: Using ${i}Hz for tone`),z.setCurrentLevel(r.currentLevel),console.log(`🔊 Starting tone at user-set level: ${r.currentLevel}dB`)}n(null),d(!1),l(!1),console.log("🔄 Response states reset"),s(!0),console.log("🔊 Tone active set to true"),z.playCurrentTone(),console.log("🎵 Pulsed tone started");const u=Me(r,C);console.log("👂 Immediate patient response check:",u),u&&(n(u),l(!0),d(!0),console.log("👂 Patient IMMEDIATELY responded to the tone!"),console.log("💾 Recording immediate response for later processing"),z.recordResponseWithoutAdjustment(u)),console.log("🎯 Recording tone presentation time"),c.current=Date.now()}catch(u){console.error("❌ Error playing tone:",u),s(!1),ie.stopTone()}},[r,s,n,l,d,c,C]),b=T.useCallback(()=>{console.log("🛑 Stopping tone..."),ie.stopTone();const u=t,i=o;console.log("🛑 Stopping tone with current state:",{toneActive:u,patientResponse:i}),s(!1);const g=Date.now();c.current=g,console.log("⏱️ Presentation stopped at:",g);let v=i;if(v===null){const p=Me(r,C);console.log("🔊 Simulating patient response at tone stop for internal processing only:",p),v=p}else console.log("🔊 Using existing patient response from during tone playback:",v);r&&(g>h.current?(console.log(`✅ Processing new presentation. Current: ${g}, Last processed: ${h.current}`),v!==null?(z.recordResponseWithoutAdjustment(!!v),console.log("🔄 Immediately updating trainer state with response:",v),f(!!v),h.current=g):(console.log("⚠️ Checking for unprocessed patient response from during tone playback"),i!==null&&(console.log("✅ Found unprocessed patient response:",i),z.recordResponseWithoutAdjustment(!!i),f(!!i),h.current=g))):console.log(`⚠️ Presentation already processed in stopTone! Current: ${g}, Last processed: ${h.current}`)),n(null),l(!1),d(!1),console.log("🔄 Patient response visuals reset AFTER updating trainer state")},[t,o,r,s,n,l,d,c,h,f,C]),m=T.useCallback(()=>{if(console.log("👂 Patient response handler called."),!r){console.log("⚠️ No current step available, cannot process patient response");return}if(!t){console.log("⚠️ False positive detected: Patient responded when no tone was presented"),z.recordFalsePositive(),d(!0),l(!0),setTimeout(()=>{l(!1),d(!1)},500);return}n(!0),l(!0),d(!0),z.recordResponse(!0),console.log("🎯 User indicated POSITIVE response"),f(!0),h.current=c.current,ie.stopTone(),s(!1)},[r,t,n,l,d,f,h,c]);return{startTone:x,stopTone:b,handlePatientResponse:m}}function ss({currentStep:r,session:t,setCurrentStep:s,setSession:o,procedurePhase:n,setProcedurePhase:l,setSuggestedAction:d,setCurrentGuidance:c,setLastResponseLevel:h,preserveThresholds:y}){const f=T.useCallback(b=>{if(r)try{const m=Math.max(-10,Math.min(120,r.currentLevel+b));console.log(`Adjusting level for frequency ${r.frequency}Hz, ${r.ear} ear: ${r.currentLevel}dB -> ${m}dB`),n==="initial"||n==="descending"?b===-10?(l("descending"),d("present"),c(`You've decreased by 10 dB. Now present the tone to see if the patient can still hear it at ${m} dB.`)):b===5||b===10?(d("present"),c(`You've increased by ${b} dB. Present the tone to check for a response at ${m} dB.`)):b===-5&&(d("present"),c(`You've decreased by 5 dB. While Hughson-Westlake protocol uses 10 dB decrements in the descending phase, you can still present the tone at ${m} dB to check for a response.`)):n==="ascending"?b===5?(d("present"),c(`You've increased by 5 dB. Now present the tone to see if the patient can hear it at ${m} dB.`)):b===10?(d("present"),c(`You've increased by 10 dB. While Hughson-Westlake protocol uses 5 dB increments in the ascending phase, you can still present the tone at ${m} dB to check for a response.`)):b<0&&(l("descending"),d("present"),c(`You've decreased by ${Math.abs(b)} dB, changing to the descending phase. Present the tone to check for a response at ${m} dB.`)):n==="threshold"?(b===-10?(d("present"),c(`You've decreased by 10 dB to ${m} dB. This follows the Hughson-Westlake protocol. Present the tone to check for a response at this new level.`),console.log(`Threshold phase - decreased by 10dB to ${m}dB`)):b===5?(d("present"),c(`You've increased by 5 dB to ${m} dB. This follows the Hughson-Westlake protocol. Present the tone to check for a response at this new level.`),console.log(`Threshold phase - increased by 5dB to ${m}dB`)):(d("present"),c(`You've changed the level to ${m} dB. Present the tone to check for a response at this level.`),console.log(`Threshold phase - adjusted by ${b}dB to ${m}dB (non-standard adjustment)`)),h(m)):n==="complete"&&(l("threshold"),d("present"),c(`You're adjusting the level after completing threshold determination. You're now at ${m} dB. Present the tone to check for a response.`));const u=Q(P({},r),{currentLevel:m});if(s(u),z.setCurrentLevel(m),t){const i=P({},t);i.testSequence=[...i.testSequence];const g=i.currentStep;i.testSequence[g]&&i.testSequence[g].frequency===r.frequency&&i.testSequence[g].ear===r.ear&&(i.testSequence[g]=Q(P({},i.testSequence[g]),{currentLevel:m}),o(i))}}catch(m){console.error("Error adjusting level:",m)}},[r,t,n,s,o,l,d,c,h]),C=T.useCallback(b=>{if(!r)return;const m=[250,500,750,1e3,1500,2e3,3e3,4e3,6e3,8e3],u=r.frequency,i=m.indexOf(u);if(i===-1)return;let g=i+b;if(g<0&&(g=0),g>=m.length&&(g=m.length-1),g!==i){const v=m[g];if(console.log(`Changing frequency from ${u}Hz to ${v}Hz`),t){const p=t.testSequence.findIndex(a=>a.frequency===v&&a.ear===r.ear&&a.testType===r.testType);if(p!==-1){console.log(`Found matching step for ${v}Hz at index ${p}`);const a=JSON.parse(JSON.stringify(t));a.currentStep=p;const L=a.testSequence[p];console.log(`Navigating to step with ID ${L.id}, frequency ${L.frequency}Hz`),o(a);const $=JSON.parse(JSON.stringify(L));s($);const B=z.getCurrentSession();B&&(B.currentStep=a.currentStep,console.log(`Explicitly updated TestingService step to ${a.currentStep} with frequency ${L.frequency}Hz`)),L.completed&&L.responseStatus==="threshold"?(l("complete"),d("next"),c(`This frequency already has a threshold stored at ${L.currentLevel} dB. You can proceed to the next frequency or adjust the level to retest.`)):(l("initial"),d("present"),c(`Now testing at ${v} Hz. Begin at a comfortable level (30-40 dB).`))}}}},[r,t,s,o,l,d,c]),x=T.useCallback((b,m)=>{if(!r||!t)return;const i=[250,500,750,1e3,1500,2e3,3e3,4e3,6e3,8e3].reduce((g,v)=>Math.abs(v-b)<Math.abs(g-b)?v:g);console.log(`Audiogram click - requested: ${b}Hz at ${m}dB, closest available: ${i}Hz`);try{const g=Math.max(-10,Math.min(120,m));if(i!==r.frequency||g!==r.currentLevel){const v=t.testSequence.findIndex(p=>p.frequency===i&&p.ear===r.ear&&p.testType===r.testType);if(v!==-1){const p=P({},t.testSequence[v]);p.currentLevel=g;const a=z.getCurrentSession();a&&(a.currentStep=v),z.setCurrentLevel(g),s(p);const L=P({},t);L.currentStep=v,L.testSequence=[...L.testSequence],L.testSequence[v]=p;const $=y(L);o($),p.completed&&p.responseStatus==="threshold"?(l("complete"),d("next"),c(`This frequency already has a threshold stored at ${p.currentLevel} dB. You can proceed to the next frequency or adjust the level to retest.`)):(l("initial"),d("present"),c(`Now testing at ${i} Hz and ${g} dB. Present the tone to check for response.`)),console.log(`Audiogram click - changed to ${i}Hz at ${g}dB`)}else console.error(`Could not find matching step for frequency ${i}Hz in test sequence`)}}catch(g){console.error("Error handling audiogram click:",g)}},[r,t,s,o,l,d,c,y]);return{handleAdjustLevel:f,handleAdjustFrequency:C,handleAudiogramClick:x}}function ns({currentStep:r,session:t,responseCounts:s,setSession:o,setCurrentStep:n,setProcedurePhase:l,setSuggestedAction:d,setCurrentGuidance:c,setResponseCounts:h,setErrorMessage:y}){const f=T.useCallback(()=>{if(!r)return{isValid:!1,message:"No current test step available."};const b=r.frequency,m=r.ear,u=r.currentLevel;if(s&&s[b]&&s[b][m]&&s[b][m][u]){const i=s[b][m][u].heard,g=s[b][m][u].total;return g>=2&&i>=2?{isValid:!0,message:"Valid threshold established."}:g<2?{isValid:!1,message:`Need more responses at this level (${i}/${g} so far).`}:{isValid:!1,message:"Invalid threshold. Hughson-Westlake requires at least 2 out of 3 responses at the same level."}}else return{isValid:!1,message:"No response data available for this level."}},[r,s]),C=T.useCallback(()=>f().isValid,[f]),x=T.useCallback(()=>{if(!r){console.error("Cannot store threshold: no current step");return}const b=f();if(!b.isValid){y(b.message);return}let m=null,u=1/0;const i=s[r.frequency],g=(i==null?void 0:i[r.ear])||{};if(Object.entries(g).forEach(([p,a])=>{const L=parseInt(p);a.total>=2&&a.heard>=2&&L<u&&(m=L,u=L)}),m===null){y("Could not determine a valid threshold level.");return}if(console.log(`Storing threshold at validated level: ${m}dB (current level is ${r.currentLevel}dB)`),z.setCurrentLevel(m),z.completeCurrentStep("threshold"),t){const p=P({},t),a=p.testSequence.findIndex($=>$.frequency===r.frequency&&$.ear===r.ear&&$.testType===r.testType);if(a===-1){console.error("Could not find matching test step in session for frequency:",r.frequency,"ear:",r.ear),y("Failed to store threshold: test step not found.");return}const L=p.testSequence[a];if(L.completed=!0,L.responseStatus="threshold",L.currentLevel=m,console.log(`DEBUG: Storing threshold for step ${a}:`,{id:L.id,frequency:L.frequency,ear:L.ear,currentLevel:L.currentLevel,responseStatus:L.responseStatus}),o(p),r){const $=Q(P({},r),{completed:!0,responseStatus:"threshold",currentLevel:m});n($)}console.log(`Threshold stored at ${m}dB, marked as completed but staying on current frequency`)}const v=z.calculateProgress();console.log(`Updated progress after storing threshold: ${v}%`),c(`Threshold successfully stored at ${m} dB! You can now use the up arrow (or press Up) to move to the next frequency, or the down arrow to go to a previous frequency.`),l("complete"),d("next"),h(p=>{const a=P({},p),L=m,$=r.frequency,B=r.ear;return console.log(`Updating response counts for threshold: ${$}Hz, ${B} ear at ${L}dB`),a[$]||(a[$]={}),a[$][B]||(a[$][B]={}),a[$][B][L]={total:3,heard:2},a})},[r,t,s,f,y,o,n,c,l,d,h]);return{validateThreshold:f,canStoreThreshold:C,handleStoreThreshold:x}}function rs({session:r,setSession:t,setCurrentStep:s,setProcedurePhase:o,setSuggestedAction:n,setCurrentGuidance:l,setLastResponseLevel:d,setErrorMessage:c,setTestProgress:h,preserveThresholds:y,onComplete:f,procedurePhase:C}){const x=T.useCallback(()=>{try{console.log("⏭️ handleSkipStep called - skipping to next frequency"),o("initial"),d(null),n("present"),l("Start testing at a comfortable level (30-40 dB)."),console.log("Reset phase to: initial for next frequency");const u=z.skipCurrentStep();if(console.log("Next step from TestingService:",u),u){const i=z.getCurrentSession();if(i){const g=y(i);t(g);const v=g.currentStep,p=g.testSequence[v];if(p){const a=JSON.parse(JSON.stringify(p));s(a),console.log("Moving to next frequency:",a.frequency)}else console.error("Current step data not found in updated session"),c("Error navigating to next frequency.")}else console.error("Failed to get updated session from TestingService"),c("Failed to update session data.")}else{const i=z.completeSession();if(i){h(100),console.log("Test completed, progress set to 100%");const g=y(i);f(g)}}}catch(u){console.error("Error skipping to next step:",u),c("Failed to go to next step. Please try again.")}},[y,t,s,o,n,l,d,c,h,f]),b=T.useCallback(()=>{try{if(console.log("⏮️ handlePreviousStep called - going to previous frequency"),o("initial"),d(null),n("present"),l("Returning to the previous frequency. Begin at a comfortable level."),console.log("Reset phase to: initial for previous frequency"),r){console.log("📊 Before navigating back - Current step:",r.currentStep);const u=JSON.parse(JSON.stringify(r));if(u.currentStep>0){u.currentStep-=1;const i=u.testSequence[u.currentStep];if(!i){console.error("Previous step not found in test sequence"),c("Error navigating to previous frequency.");return}console.log("📊 Going back to step:",u.currentStep,"with frequency:",i.frequency);const g=y(u);t(g);const v=g.currentStep,p=g.testSequence[v];if(p){const L=JSON.parse(JSON.stringify(p));s(L)}else{console.error("Current step data not found in preserved session"),c("Error navigating to previous frequency.");return}const a=z.getCurrentSession();a&&(a.currentStep=g.currentStep,console.log(`🔄 Explicitly updated TestingService step to ${g.currentStep} with frequency ${p.frequency}Hz`)),console.log("Moving to previous frequency:",p.frequency)}else console.log("Already at the first frequency, cannot go back further"),c("Already at the first frequency.")}else console.error("No active session found"),c("No active session. Please restart the test.")}catch(u){console.error("Error going to previous step:",u),c("Failed to go to previous step. Please try again.")}},[r,y,t,s,o,n,l,d,c]),m=T.useCallback((u,i,g,v)=>{var a;console.log("Implementing suggested action:",u);const p=r?JSON.parse(JSON.stringify(r)):null;switch(u){case"increase":C==="initial"?(v(10),console.log("Remained in initial phase after increasing by 10dB")):(v(5),console.log("Adjusted by 5dB in ascending/threshold phase"));break;case"decrease":v(-10),console.log("Decreased by 10dB as per suggestion");break;case"store_threshold":const{isValid:L,message:$}=i();L?(g(),console.log("Stored threshold using suggested action")):(c($),l($+" Continue testing to establish a valid threshold."));break;case"next":if(C==="complete"&&r){const{isValid:B}=i(),D=r.currentStep;B&&D!==void 0&&!((a=r.testSequence[D])!=null&&a.completed)&&(console.log("Current step has valid threshold but is not marked completed - calling handleStoreThreshold"),g())}x(),console.log("Moved to next frequency");break;case"present":if((r==null?void 0:r.currentStep)!==void 0&&(r!=null&&r.testSequence[r.currentStep])){const B=r.testSequence[r.currentStep].currentLevel;l(`Present the tone at ${B} dB to check for a response.`)}break;default:console.log("Unknown suggested action:",u)}if(p&&r&&JSON.stringify(p)!==JSON.stringify(r)){console.log("Session changed after action, ensuring thresholds are preserved...");const L=y(r);JSON.stringify(L)!==JSON.stringify(r)&&(console.log("Updating session with preserved thresholds"),t(L))}},[r,C,x,y,t,l,c]);return{handleSkipStep:x,handlePreviousStep:b,handleSuggestedAction:m}}const os=(r,t,s)=>{const[o,n]=T.useState(null),[l,d]=T.useState(null),[c,h]=T.useState(0),[y,f]=T.useState(!1),[C,x]=T.useState(null),[b,m]=T.useState(!1),[u,i]=T.useState(!1),[g,v]=T.useState(""),[p,a]=T.useState("initial"),[L,$]=T.useState("Start testing at a comfortable level (30-40 dB)."),[B,D]=T.useState("present"),[A,M]=T.useState(null),[_,X]=T.useState({}),F=T.useRef(null),te=T.useRef(0),G=T.useRef(0),V=T.useRef(null),se=T.useMemo(()=>Zt(o),[o]),ne=T.useCallback(N=>Kt(N,o),[o]),w=T.useCallback(N=>{if(!l)return;const W=es(N,l,p,_,V.current,te.current,G.current);a(W.procedurePhase),D(W.suggestedAction),$(W.guidance),W.lastResponseLevel!==null&&M(W.lastResponseLevel),X(W.responseCounts),p!=="threshold"&&W.procedurePhase==="threshold"&&(V.current=Date.now(),console.log(`⏰ Setting threshold phase start time to ${V.current}`))},[l,p,_]),{startTone:q,stopTone:I,handlePatientResponse:re}=ts({currentStep:l,toneActive:y,setToneActive:f,patientResponse:C,setPatientResponse:x,setShowResponseIndicator:m,setPatientJustResponded:i,lastPresentationTimeRef:te,lastProcessedPresentationRef:G,thresholdPhaseStartTime:V,updateTrainerState:w,patientThresholds:r.thresholds}),{handleAdjustLevel:ge,handleAdjustFrequency:Ze,handleAudiogramClick:et}=ss({currentStep:l,session:o,setCurrentStep:d,setSession:n,procedurePhase:p,setProcedurePhase:a,setSuggestedAction:D,setCurrentGuidance:$,setLastResponseLevel:M,preserveThresholds:ne}),{validateThreshold:fe,canStoreThreshold:tt,handleStoreThreshold:xe}=ns({currentStep:l,session:o,responseCounts:_,setSession:n,setCurrentStep:d,setProcedurePhase:a,setSuggestedAction:D,setCurrentGuidance:$,setResponseCounts:X,setErrorMessage:v}),st=tt(),{handleSkipStep:nt,handlePreviousStep:rt,handleSuggestedAction:qe}=rs({session:o,setSession:n,setCurrentStep:d,setProcedurePhase:a,setSuggestedAction:D,setCurrentGuidance:$,setLastResponseLevel:M,setErrorMessage:v,setTestProgress:h,preserveThresholds:ne,onComplete:t,procedurePhase:p}),ot=T.useCallback(()=>{qe(B,fe,xe,ge)},[B,fe,xe,ge,qe]);return T.useEffect(()=>{try{a("initial"),M(null),D("present"),$("Start testing at a comfortable level (30-40 dB)."),ie.resumeAudioContext().then(()=>{const N=z.startSession(r);n(N),d(z.getCurrentStep()),h(0),console.log("New test session started, progress initialized to 0%")})}catch(N){console.error("Error initializing test session:",N),v("Failed to initialize test session. Please try again.")}},[r]),T.useEffect(()=>{const N=()=>{y&&I()};return document.addEventListener("mouseup",N),()=>{document.removeEventListener("mouseup",N)}},[y,I]),T.useEffect(()=>()=>{F.current&&clearInterval(F.current),ie.stopTone()},[]),T.useEffect(()=>{if(o){const N=z.calculateProgress();h(N),console.log(`Test progress updated: ${N}%`),N===0&&o.testSequence.some(W=>W.completed)&&console.log("WARNING: Progress is 0% but there are completed steps:",o.testSequence.filter(W=>W.completed).map(W=>({id:W.id,freq:W.frequency,ear:W.ear,completed:W.completed,status:W.responseStatus})))}},[o,l]),{session:o,currentStep:l,testProgress:c,toneActive:y,patientResponse:C,showResponseIndicator:b,patientJustResponded:u,errorMessage:g,procedurePhase:p,currentGuidance:L,suggestedAction:B,lastResponseLevel:A,canStoreThreshold:st,thresholds:se,startTone:q,stopTone:I,handlePatientResponse:re,handleAdjustLevel:ge,handleAdjustFrequency:Ze,handleStoreThreshold:xe,handleSkipStep:nt,handlePreviousStep:rt,handleSuggestedAction:ot,handleAudiogramClick:et,validateThreshold:fe}},is=({currentStep:r,testProgress:t,thresholdCount:s})=>e.jsx(H,{elevation:2,sx:{p:2,mb:2},children:e.jsxs(j,{sx:{display:"flex",flexDirection:"column"},children:[e.jsxs(j,{sx:{display:"flex",justifyContent:"space-between",alignItems:"center",mb:1},children:[e.jsx(S,{variant:"subtitle1",fontWeight:"medium",children:"Test Progress"}),e.jsxs(j,{sx:{display:"flex",alignItems:"center",gap:1},children:[s!==void 0&&e.jsx(Y,{label:`${s} thresholds stored`,size:"small",color:"primary",variant:"outlined"}),e.jsxs(S,{variant:"body2",color:"text.secondary",children:[t,"%"]})]})]}),e.jsx(Oe,{variant:"determinate",value:t,sx:{mb:1.5,height:8,borderRadius:1}}),e.jsxs(j,{sx:{display:"flex",justifyContent:"space-between"},children:[e.jsxs(S,{variant:"body2",color:"text.secondary",children:["Frequency: ",r.frequency," Hz"]}),e.jsxs(S,{variant:"body2",color:"text.secondary",children:["Ear: ",r.ear==="left"?"Left":"Right"]}),e.jsxs(S,{variant:"body2",color:"text.secondary",children:["Current Level: ",r.currentLevel," dB HL"]})]})]})}),ls=({currentGuidance:r,suggestedAction:t,showResponseIndicator:s,patientResponse:o,canStoreThreshold:n,onStoreThreshold:l,onSuggestedAction:d,startTone:c,stopTone:h})=>{const y=x=>{x!=="present"&&d()},f=()=>{t==="present"&&c&&c()},C=()=>{t==="present"&&h&&(h(),d())};return e.jsxs(H,{elevation:2,sx:{p:2,mb:2,position:"relative",overflow:"hidden",minHeight:"6rem",display:"flex",flexDirection:"column",justifyContent:"space-between"},children:[s&&o!==null&&e.jsx(j,{sx:{position:"absolute",top:0,right:0,p:1.5,zIndex:100,display:"flex",alignItems:"center",gap:1},children:e.jsx(Y,{icon:o?e.jsx(Se,{}):e.jsx(pt,{}),label:o?"Heard":"Not Heard",color:o?"success":"warning",variant:"filled",size:"small"})}),e.jsx(j,{sx:{mb:2},children:e.jsx(S,{variant:"body1",sx:{mb:1,fontWeight:"500"},children:r})}),e.jsxs(j,{sx:{display:"flex",gap:2,justifyContent:"flex-end"},children:[n&&e.jsx(R,{variant:"outlined",color:"primary",onClick:l,size:"small",children:"Store Threshold"}),t&&e.jsx(R,{variant:"contained",color:"primary",onClick:()=>y(t),onMouseDown:t==="present"?f:void 0,onMouseUp:t==="present"?C:void 0,onMouseLeave:t==="present"?C:void 0,onTouchStart:t==="present"?f:void 0,onTouchEnd:t==="present"?C:void 0,size:"small",children:as(t)})]})]})};function as(r){switch(r){case"present":return"Present Tone";case"increase":return"Increase Level";case"decrease":return"Decrease Level";case"store_threshold":return"Store Threshold";case"next":return"Next Frequency";default:return"Continue"}}const cs=({currentStep:r,toneActive:t,onAdjustLevel:s})=>{const o=t;return e.jsxs(j,{sx:{display:"flex",flexDirection:"column",alignItems:"center",gap:2},children:[e.jsx(S,{variant:"body2",color:"text.secondary",sx:{alignSelf:"center"},children:"Current Level"}),e.jsx(Y,{label:`${r.currentLevel} dB HL`,color:"primary",variant:"outlined",size:"medium",sx:{fontWeight:"bold",fontSize:"1.1rem",width:"100px",height:"36px"}}),e.jsxs(j,{sx:{display:"flex",alignItems:"center",gap:1},children:[e.jsx(Z,{title:"Decrease Level (5dB)",children:e.jsx("span",{children:e.jsx(oe,{color:"primary",disabled:o,onClick:()=>s(-5),sx:{border:"1px solid",borderColor:"divider"},size:"large",children:e.jsx(Te,{})})})}),e.jsx(Z,{title:"Increase Level (5dB)",children:e.jsx("span",{children:e.jsx(oe,{color:"primary",disabled:o,onClick:()=>s(5),sx:{border:"1px solid",borderColor:"divider"},size:"large",children:e.jsx(Le,{})})})})]}),e.jsxs(j,{sx:{display:"flex",alignItems:"center",gap:1,mt:1},children:[e.jsx(Z,{title:"Decrease Level (10dB)",children:e.jsx("span",{children:e.jsx(oe,{color:"primary",disabled:o,onClick:()=>s(-10),sx:{border:"1px solid",borderColor:"divider"},size:"small",children:e.jsx(Te,{fontSize:"small"})})})}),e.jsx(Z,{title:"Increase Level (10dB)",children:e.jsx("span",{children:e.jsx(oe,{color:"primary",disabled:o,onClick:()=>s(10),sx:{border:"1px solid",borderColor:"divider"},size:"small",children:e.jsx(Le,{fontSize:"small"})})})})]})]})},ds=({currentStep:r,toneActive:t,onAdjustFrequency:s})=>{const o=t;return e.jsxs(j,{sx:{display:"flex",flexDirection:"column",alignItems:"center",gap:2},children:[e.jsx(S,{variant:"body2",color:"text.secondary",sx:{alignSelf:"center"},children:"Current Frequency"}),e.jsx(Y,{label:`${r.frequency} Hz`,color:"primary",variant:"outlined",size:"medium",sx:{fontWeight:"bold",fontSize:"1.1rem",width:"120px",height:"36px"}}),e.jsxs(j,{sx:{display:"flex",alignItems:"center",gap:1},children:[e.jsx(Z,{title:"Previous Frequency",children:e.jsx("span",{children:e.jsx(oe,{color:"primary",disabled:o,onClick:()=>s(-1),sx:{border:"1px solid",borderColor:"divider"},size:"large",children:e.jsx(gt,{})})})}),e.jsx(Z,{title:"Next Frequency",children:e.jsx("span",{children:e.jsx(oe,{color:"primary",disabled:o,onClick:()=>s(1),sx:{border:"1px solid",borderColor:"divider"},size:"large",children:e.jsx(ft,{})})})})]}),e.jsx(S,{variant:"body2",color:"text.secondary",sx:{mt:1},children:r.ear==="left"?"Left Ear":"Right Ear"})]})},hs=({currentStep:r,toneActive:t,onAdjustLevel:s,onAdjustFrequency:o,startTone:n,stopTone:l,canStoreThreshold:d,onStoreThreshold:c})=>{T.useEffect(()=>{const f=()=>{t&&l()};return document.addEventListener("mouseup",f),document.addEventListener("touchend",f),()=>{document.removeEventListener("mouseup",f),document.removeEventListener("touchend",f),t&&l()}},[t,l]);const h=f=>{f.preventDefault(),n()},y=f=>{f.preventDefault(),n()};return e.jsx(j,{sx:{width:"100%"},children:e.jsxs(E,{container:!0,spacing:2,children:[e.jsx(E,{item:!0,xs:12,children:e.jsx(H,{elevation:2,sx:{p:2,mb:2},children:e.jsxs(j,{sx:{display:"flex",flexDirection:{xs:"column",sm:"row"},justifyContent:"space-between",alignItems:"center",gap:2},children:[e.jsx(j,{sx:{display:"flex",justifyContent:"center",flex:1},children:e.jsx(Z,{title:t?"Release to stop tone":"Press and hold to present tone",children:e.jsx(R,{variant:t?"outlined":"contained",color:"primary",startIcon:t?e.jsx(xt,{}):e.jsx(Ce,{}),onMouseDown:h,onTouchStart:y,size:"large",sx:{px:3,py:1.5,width:"100%",maxWidth:"200px",borderRadius:"28px"},children:t?"Stop Tone":"Present Tone"})})}),e.jsx(j,{sx:{display:"flex",justifyContent:"center",flex:1},children:e.jsx(Z,{title:d?"Store the current level as the threshold for this frequency":"More responses needed to determine threshold",children:e.jsxs("span",{children:[" ",e.jsx(R,{variant:"contained",color:"success",startIcon:e.jsx(Ye,{}),onClick:c,disabled:!d||t,sx:{py:1.5,width:"100%",maxWidth:"200px",fontWeight:"medium"},children:"Store Threshold"})]})})})]})})}),e.jsx(E,{item:!0,xs:12,sm:6,children:e.jsxs(H,{elevation:2,sx:{p:2,height:"100%"},children:[e.jsx(S,{variant:"subtitle1",gutterBottom:!0,fontWeight:"medium",children:"Level Control"}),e.jsx(cs,{currentStep:r,toneActive:t,onAdjustLevel:s})]})}),e.jsx(E,{item:!0,xs:12,sm:6,children:e.jsxs(H,{elevation:2,sx:{p:2,height:"100%"},children:[e.jsx(S,{variant:"subtitle1",gutterBottom:!0,fontWeight:"medium",children:"Frequency Control"}),e.jsx(ds,{currentStep:r,toneActive:t,onAdjustFrequency:o})]})})]})})},us=({thresholds:r,currentStep:t,toneActive:s,onAudiogramClick:o})=>{console.log("AudiogramContainer received thresholds:",r);const n=[125,250,500,750,1e3,1500,2e3,3e3,4e3,6e3,8e3],l=[-10,-5,0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100,105,110],d=[-10,0,10,20,30,40,50,60,70,80,90,100,110],c=[-10,0,10,20,30,40,50,60,70,80,90,100,110],h=i=>c.includes(i),y=[125,250,500,1e3,2e3,4e3,8e3],f=i=>y.includes(i),C=(i,g)=>{const v=n.indexOf(i),p=l.indexOf(g);if(v===-1||p===-1)return null;const a=v/(n.length-1)*100,L=p/(l.length-1)*100;return{x:a,y:L}},x=r.filter(i=>i.ear==="left"),b=r.filter(i=>i.ear==="right");console.log("Left ear thresholds to display:",x),console.log("Right ear thresholds to display:",b);const m=i=>{if(!o)return;const g=i.currentTarget.getBoundingClientRect(),v=i.clientX-g.left,p=i.clientY-g.top,a=Math.round(v/g.width*(n.length-1)),L=Math.round(p/g.height*(l.length-1)),$=n[Math.max(0,Math.min(a,n.length-1))],B=l[Math.max(0,Math.min(L,l.length-1))];o($,t.ear,B)},u=i=>i>=1e3?`${i/1e3}k`:i.toString();return e.jsxs(H,{elevation:3,sx:{p:2,mb:3,position:"relative",overflow:"hidden",maxWidth:"85%",margin:"0 auto",paddingLeft:"60px"},children:[e.jsxs(S,{variant:"h6",sx:{mb:2,display:"flex",justifyContent:"space-between"},children:[e.jsx("span",{children:"Audiogram"}),e.jsxs(S,{variant:"body2",color:"text.secondary",children:["Testing: ",t.frequency," Hz, ",t.ear==="left"?"Left":"Right"," ear",t.testType==="air"?" (Air Conduction)":" (Bone Conduction)"]})]}),e.jsxs(j,{sx:{position:"relative",height:"260px",border:"1px solid",borderColor:"divider",cursor:o?"pointer":"default",backgroundColor:"rgba(250, 250, 250, 0.5)"},onClick:m,children:[n.map((i,g)=>{const v=g/(n.length-1)*100;return e.jsx(j,{sx:Q(P(P({position:"absolute",left:`${v}%`,top:0,height:"100%",width:"1px"},f(i)?{borderLeft:"1px solid rgba(0, 0, 0, 0.3)",backgroundColor:"rgba(0, 0, 0, 0.08)"}:{borderLeft:"1px dashed rgba(0, 0, 0, 0.2)",backgroundColor:"transparent"}),t.frequency===i?{backgroundColor:"rgba(25, 118, 210, 0.1)",borderLeft:"1px solid rgba(25, 118, 210, 0.5)"}:{}),{zIndex:1})},`line-${i}`)}),d.map((i,g)=>{const v=l.indexOf(i)/(l.length-1)*100;return e.jsx(j,{sx:Q(P({position:"absolute",left:0,top:`${v}%`,width:"100%",height:"1px",backgroundColor:"rgba(0, 0, 0, 0.05)",borderTop:i%20===0?"1px solid rgba(0, 0, 0, 0.2)":"1px solid rgba(0, 0, 0, 0.1)"},t.currentLevel===i?{backgroundColor:"rgba(25, 118, 210, 0.1)",borderTop:"1px solid rgba(25, 118, 210, 0.5)"}:{}),{zIndex:1})},`hline-${i}`)}),e.jsxs(j,{sx:{position:"absolute",bottom:"-30px",left:0,right:0,display:"flex",flexDirection:"column"},children:[e.jsx(j,{sx:{display:"flex",justifyContent:"space-between",px:"5px",pt:"5px"},children:n.map(i=>e.jsx(S,{variant:"caption",sx:{transform:"translateX(-50%)",fontWeight:t.frequency===i?"bold":"normal",color:t.frequency===i?"primary.main":"text.secondary",fontSize:"0.7rem"},children:u(i)},i))}),e.jsx(S,{variant:"caption",sx:{textAlign:"center",mt:1,fontWeight:"medium",fontSize:"0.75rem"},children:"Frequency (Hz)"})]}),e.jsxs(j,{sx:{position:"absolute",top:0,left:"-50px",bottom:0,height:"100%",width:"50px",display:"flex",flexDirection:"column",justifyContent:"space-between",py:"5px"},children:[e.jsx(S,{variant:"caption",sx:{position:"absolute",left:"-30px",top:"50%",transform:"rotate(-90deg) translateX(50%)",transformOrigin:"left center",fontWeight:"bold",whiteSpace:"nowrap"},children:"Hearing Level (dB HL)"}),l.map(i=>{const g=l.indexOf(i)/(l.length-1)*100;return h(i)?e.jsx(S,{variant:"caption",sx:{position:"absolute",left:0,top:`${g}%`,transform:"translateY(-50%)",fontWeight:t.currentLevel===i?"bold":"normal",color:t.currentLevel===i?"primary.main":"text.secondary",width:"45px",textAlign:"right",fontSize:"0.75rem",paddingRight:"5px"},children:i},i):null})]}),(()=>{const i=C(t.frequency,t.currentLevel);return i?e.jsx(j,{sx:{position:"absolute",left:`${i.x}%`,top:`${i.y}%`,width:"12px",height:"12px",borderRadius:"50%",backgroundColor:s?"primary.main":"rgba(25, 118, 210, 0.5)",transform:"translate(-50%, -50%)",boxShadow:"0 0 0 2px white",transition:"background-color 0.3s",animation:s?"pulse 1.5s infinite":"none","@keyframes pulse":{"0%":{boxShadow:"0 0 0 0 rgba(25, 118, 210, 0.7)"},"70%":{boxShadow:"0 0 0 10px rgba(25, 118, 210, 0)"},"100%":{boxShadow:"0 0 0 0 rgba(25, 118, 210, 0)"}}}}):null})(),x.map(i=>{const g=C(i.frequency,i.level);if(!g)return null;const v=b.some(L=>L.frequency===i.frequency&&L.level===i.level),p=v?-1.5:0,a=v?-1.5:0;return i.testType==="air"?e.jsx(j,{sx:{position:"absolute",left:`calc(${g.x}% + ${p}px)`,top:`calc(${g.y}% + ${a}px)`,width:"16px",height:"16px",transform:"translate(-50%, -50%)",zIndex:4,"&:before":{content:'""',position:"absolute",width:"10px",height:"10px",backgroundColor:"rgba(255, 255, 255, 0.75)",borderRadius:"2px",left:"3px",top:"3px",zIndex:-1},"&:after":{content:'""',position:"absolute",backgroundColor:"#2196f3",display:"block",width:"16px",height:"3px",top:"6.5px",left:"0px",borderRadius:"1px",transform:"rotate(45deg)",boxShadow:"0 0 1px rgba(0,0,0,0.5)"}},children:e.jsx(j,{sx:{position:"absolute",backgroundColor:"#2196f3",width:"16px",height:"3px",top:"6.5px",left:"0px",borderRadius:"1px",transform:"rotate(-45deg)",boxShadow:"0 0 1px rgba(0,0,0,0.5)"}})},`left-air-${i.frequency}`):e.jsx(j,{sx:{position:"absolute",left:`calc(${g.x}% + ${p}px)`,top:`calc(${g.y}% + ${a}px)`,width:"14px",height:"14px",transform:"translate(-50%, -50%)",zIndex:4,"&:before":{content:'">"',position:"absolute",color:"#2196f3",fontSize:"16px",fontWeight:"bold",lineHeight:"14px",top:"0px",left:"0px",textShadow:"0 0 3px rgba(255,255,255,0.9)"}}},`left-bone-${i.frequency}`)}),b.map(i=>{const g=C(i.frequency,i.level);if(!g)return null;const v=x.some(L=>L.frequency===i.frequency&&L.level===i.level),p=v?1.5:0,a=v?1.5:0;return i.testType==="air"?e.jsx(j,{sx:{position:"absolute",left:`calc(${g.x}% + ${p}px)`,top:`calc(${g.y}% + ${a}px)`,width:"14px",height:"14px",borderRadius:"50%",border:"3px solid #f44336",backgroundColor:"rgba(255, 255, 255, 0.85)",transform:"translate(-50%, -50%)",zIndex:3,boxShadow:"0 0 2px rgba(0,0,0,0.3)"}},`right-air-${i.frequency}`):e.jsx(j,{sx:{position:"absolute",left:`calc(${g.x}% + ${p}px)`,top:`calc(${g.y}% + ${a}px)`,width:"14px",height:"14px",transform:"translate(-50%, -50%)",zIndex:3,"&:before":{content:'"<"',position:"absolute",color:"#f44336",fontSize:"16px",fontWeight:"bold",lineHeight:"14px",top:"0px",left:"0px",textShadow:"0 0 3px rgba(255,255,255,0.9)"}}},`right-bone-${i.frequency}`)})]}),e.jsxs(j,{sx:{display:"flex",flexWrap:"wrap",justifyContent:"center",gap:3,mt:3},children:[e.jsxs(j,{sx:{display:"flex",alignItems:"center",gap:1},children:[e.jsx(j,{sx:{width:"10px",height:"10px",position:"relative","&:before, &:after":{content:'""',position:"absolute",backgroundColor:"#2196f3",width:"10px",height:"2px"},"&:before":{transform:"rotate(45deg)"},"&:after":{transform:"rotate(-45deg)"}}}),e.jsx(S,{variant:"caption",children:"Left Ear (Air)"})]}),e.jsxs(j,{sx:{display:"flex",alignItems:"center",gap:1},children:[e.jsx(j,{sx:{width:"10px",height:"10px",borderRadius:"50%",border:"2px solid #f44336",backgroundColor:"white"}}),e.jsx(S,{variant:"caption",children:"Right Ear (Air)"})]}),e.jsxs(j,{sx:{display:"flex",alignItems:"center",gap:1},children:[e.jsx(S,{variant:"h6",sx:{color:"#2196f3",fontWeight:"bold",lineHeight:1,fontSize:"18px"},children:">"}),e.jsx(S,{variant:"caption",children:"Left Ear (Bone)"})]}),e.jsxs(j,{sx:{display:"flex",alignItems:"center",gap:1},children:[e.jsx(S,{variant:"h6",sx:{color:"#f44336",fontWeight:"bold",lineHeight:1,fontSize:"18px"},children:"<"}),e.jsx(S,{variant:"caption",children:"Right Ear (Bone)"})]}),e.jsxs(j,{sx:{display:"flex",alignItems:"center",gap:1},children:[e.jsx(j,{sx:{width:"14px",height:"2px",backgroundColor:"rgba(0, 0, 0, 0.3)"}}),e.jsx(S,{variant:"caption",children:"Octave"})]}),e.jsxs(j,{sx:{display:"flex",alignItems:"center",gap:1},children:[e.jsx(j,{sx:{width:"14px",height:"0px",borderTop:"2px dashed rgba(0, 0, 0, 0.2)"}}),e.jsx(S,{variant:"caption",children:"Inter-octave"})]})]})]})},ps=Fe`
  0% { opacity: 1; transform: scale(1); }
  50% { opacity: 0.8; transform: scale(1.05); }
  100% { opacity: 1; transform: scale(1); }
`,gs=Fe`
  0% { box-shadow: 0 0 0 0 rgba(25, 118, 210, 0.4); }
  70% { box-shadow: 0 0 0 10px rgba(25, 118, 210, 0); }
  100% { box-shadow: 0 0 0 0 rgba(25, 118, 210, 0); }
`;ae(Y)(({theme:r})=>({margin:r.spacing(1),fontWeight:"bold",padding:r.spacing(2,1),height:"auto","& .MuiChip-label":{padding:r.spacing(.5,1)},"& .MuiChip-icon":{fontSize:"1.2rem"}}));ae(j)(({theme:r})=>({padding:r.spacing(1),borderRadius:r.shape.borderRadius,backgroundColor:r.palette.grey[100],display:"flex",alignItems:"center"}));const fs=ae(ee)(({theme:r})=>({marginBottom:r.spacing(2),fontWeight:"bold",animation:`${ps} 1.5s infinite ease-in-out`,boxShadow:"0 4px 10px rgba(76, 175, 80, 0.3)",border:"1px solid #4caf50"})),xs=ae(Y)(({theme:r})=>({fontWeight:"bold",fontSize:"0.85rem",padding:r.spacing(.5,1),marginBottom:r.spacing(1)})),ms=ae(R)(({theme:r})=>({marginTop:r.spacing(1),textTransform:"none",fontWeight:"500"})),ys=({guidance:r,action:t,phase:s,onStoreThreshold:o,canStoreThreshold:n,patientResponded:l=!1,onImplementSuggestion:d,showResponseAlert:c=!1})=>{const[h,y]=T.useState(!1),[f,C]=T.useState(!1),x=le();T.useEffect(()=>{if(console.log("GuidancePanel received patientResponded:",l),l){console.log("Setting responseDetected to true"),y(!0);const a=setTimeout(()=>{y(!1)},8e3);return()=>{console.log("Cleaning up timer"),clearTimeout(a)}}},[l]);const m={increase:{label:"Increase Level (+5 dB)",icon:e.jsx(Le,{}),color:"primary",description:"Increase the hearing level by 5 dB. This smaller step size is used during the ascending phase and after no-response during bracketing to precisely identify the threshold."},decrease:{label:"Decrease Level (-10 dB)",icon:e.jsx(Te,{}),color:"secondary",description:"Decrease the hearing level by 10 dB. After ANY positive response, the Hughson-Westlake protocol requires an immediate 10 dB decrease to prevent adaptation and maintain stimulus uncertainty."},present:{label:"Present Tone",icon:e.jsx(Ce,{}),color:"info",description:"Present a 1-2 second tone burst to check if the patient can hear it at the current level. Short tone bursts enhance detectability compared to continuous tones."},store_threshold:{label:"Store Threshold",icon:e.jsx(Se,{}),color:"success",description:"The threshold has been determined (≥2 responses out of 3 presentations at the same level). This is the lowest intensity that achieves a 50% or greater response rate during ascending trials."},next:{label:"Next Frequency",icon:e.jsx(wt,{}),color:"warning",description:"Move to the next test frequency. The standard sequence (1→2→4→8 kHz then 0.25→0.5 kHz) minimizes cross-frequency masking effects."}}[t]||{label:"Continue Testing",icon:e.jsx(Lt,{}),description:"Continue with the testing procedure following the Hughson-Westlake protocol."},u={initial:{name:"Initial Presentation",description:"Start with a comfortable level that the patient is likely to hear (30-40 dB HL).",tips:["Begin at a level 30-40 dB above estimated threshold (typically 1 kHz initially)","Present a clearly audible tone for 1-2 seconds to establish baseline","Short tone bursts are more detectable than continuous tones","If no response, increase in 10-15 dB steps until response is obtained"]},descending:{name:"Descending Phase",description:"Decrease intensity in 10 dB steps until the patient no longer responds.",tips:["After each response, immediately decrease by 10 dB steps","Continue the descent until the patient fails to respond","The descending phase identifies the sub-threshold boundary","This large step size (10 dB) efficiently approaches the threshold region"]},ascending:{name:"Ascending Phase",description:"From the last non-responsive level, increase intensity in 5 dB steps until the patient responds again.",tips:["After no response, increase by 5 dB steps","Smaller step size (5 dB) provides more precise threshold determination","Continue until the patient responds again","This first response marks the beginning of threshold determination"]},threshold:{name:"Threshold Determination (Bracketing)",description:"Use the 10 dB down / 5 dB up bracketing technique to determine threshold.",tips:["After each response: immediately reduce level by 10 dB","After no response: increase by 5 dB steps","Threshold is defined as the lowest level with ≥50% response rate","Required: 2/3 responses at the same level for automated testing","Must not stagnate at a single level; each response triggers a mandatory 10 dB descent","Continue the oscillatory pattern until meeting threshold criteria"]},complete:{name:"Threshold Complete",description:"The threshold has been established. Record this value and proceed to the next frequency.",tips:["Store the current level as the threshold for this frequency","The threshold is defined as the lowest level at which at least 2 out of 3 responses are obtained","Verify the threshold with a non-response at 5 dB below the threshold level","Move to the next test frequency and repeat the procedure","Standard sequence is 1→2→4→8 kHz then 0.25→0.5 kHz to minimize cross-frequency masking"]}},i=u[s]||u.initial,g=c||l,v=g||h,p=()=>{d&&d()};return e.jsxs(H,{elevation:3,sx:{p:3,mb:2,backgroundColor:v?x.palette.mode==="dark"?K(x.palette.success.dark,.1):"#f5fff5":x.palette.mode==="dark"?x.palette.background.paper:"#f8f9fa",borderLeft:v?"4px solid #4caf50":"4px solid #3f51b5",position:"relative",transition:"all 0.3s ease"},children:[g&&e.jsx(fs,{icon:e.jsx(mt,{sx:{fontSize:24}}),severity:"success",children:"Patient has responded to the tone! Follow the suggested action below."}),e.jsxs(j,{sx:{display:"flex",alignItems:"center",mb:2},children:[e.jsx(yt,{color:"primary",sx:{mr:2,fontSize:28}}),e.jsx(S,{variant:"h6",fontWeight:"bold",children:"Hughson-Westlake Training Guide"})]}),e.jsxs(j,{sx:{mb:3},children:[e.jsx(xs,{label:i.name,size:"medium",color:s==="complete"?"success":"primary",sx:{fontWeight:"bold",px:1}}),e.jsx(S,{variant:"body1",sx:{fontWeight:500,mb:1},children:i.description}),e.jsx(ms,{startIcon:f?e.jsx(_e,{}):e.jsx(Ve,{}),onClick:()=>C(!f),color:"primary",variant:"text",size:"small",children:f?"Hide Details":"Show Procedure Details"}),e.jsx(Ue,{in:f,children:e.jsxs(j,{sx:{mt:1,p:2,backgroundColor:x.palette.mode==="dark"?K(x.palette.background.paper,.6):"#f5f5f5",borderRadius:1,border:`1px solid ${x.palette.divider}`},children:[e.jsxs(S,{variant:"subtitle2",fontWeight:"bold",gutterBottom:!0,children:[i.name," - Procedure Tips:"]}),e.jsx(bt,{dense:!0,children:i.tips.map((a,L)=>e.jsxs(vt,{sx:{py:.5},children:[e.jsx(jt,{sx:{minWidth:28},children:e.jsx(St,{color:"primary",fontSize:"small"})}),e.jsx(Tt,{primary:a})]},L))})]})})]}),e.jsx(he,{sx:{my:2}}),e.jsxs(j,{sx:{mb:3},children:[e.jsx(S,{variant:"subtitle1",fontWeight:"bold",gutterBottom:!0,children:"Current Guidance:"}),e.jsx(S,{variant:"body1",sx:{p:2,backgroundColor:v?x.palette.mode==="dark"?K(x.palette.success.dark,.2):"#e8f5e9":x.palette.mode==="dark"?K(x.palette.primary.dark,.1):"#e3f2fd",borderRadius:2,fontWeight:500,border:v?`1px solid ${x.palette.success.main}`:`1px solid ${x.palette.mode==="dark"?x.palette.primary.dark:"#bbdefb"}`,transition:"all 0.3s ease",boxShadow:"0 1px 3px rgba(0,0,0,0.12)"},children:r})]}),e.jsxs(j,{sx:{mt:3},children:[e.jsx(S,{variant:"subtitle1",fontWeight:"bold",gutterBottom:!0,children:"Suggested Action:"}),e.jsxs(j,{sx:{display:"flex",flexDirection:"column",alignItems:"flex-start",mt:1,p:2,borderRadius:2,backgroundColor:x.palette.mode==="dark"?K(x.palette.background.paper,.6):"#f8f9fa",border:`1px solid ${x.palette.divider}`,boxShadow:"0 1px 3px rgba(0,0,0,0.08)",animation:t==="store_threshold"||t==="present"?`${gs} 2s infinite`:"none"},children:[e.jsxs(j,{sx:{display:"flex",flexDirection:"column",width:"100%",mb:2},children:[e.jsx(S,{variant:"body1",fontWeight:"medium",gutterBottom:!0,children:m.label}),e.jsx(S,{variant:"body2",color:"text.secondary",children:m.description})]}),t!=="present"&&d&&e.jsx(R,{variant:"contained",color:"primary",onClick:p,startIcon:m.icon,sx:{mt:1,alignSelf:"flex-end"},children:"Implement This Suggestion"})]}),t==="store_threshold"&&n&&o&&e.jsx(R,{variant:"contained",color:"success",startIcon:e.jsx(Se,{}),onClick:o,sx:{mt:2,px:3,py:1.5,boxShadow:"0 4px 10px rgba(76, 175, 80, 0.3)",fontWeight:"bold"},fullWidth:!0,children:"Store This Threshold & Continue"})]})]})},bs=({patient:r,onComplete:t,onCancel:s})=>{const{session:o,currentStep:n,testProgress:l,toneActive:d,patientResponse:c,showResponseIndicator:h,patientJustResponded:y,errorMessage:f,procedurePhase:C,currentGuidance:x,suggestedAction:b,canStoreThreshold:m,thresholds:u,startTone:i,stopTone:g,handleAdjustLevel:v,handleAdjustFrequency:p,handleStoreThreshold:a,handleSuggestedAction:L,handleAudiogramClick:$}=os(r,t),[B,D]=T.useState(!1),[A,M]=T.useState(!1),[_,X]=T.useState(null),F=le(),te=(w,q,I)=>{$(w,I)},G=()=>{D(!B)};console.log("Original thresholds from useAudioTest:",u);const V=u.map(w=>(console.log("Converting threshold point:",w),{frequency:w.frequency,ear:w.ear,level:w.hearingLevel,testType:w.testType}));console.log("Converted thresholds for AudiogramContainer:",V);const se=()=>{if(o){l<100&&m&&a();const w=z.completeSession();if(w&&(console.log("Session completed manually with results:",w.results),w.results)){const q=Q(P({},o),{completed:!0,results:w.results});Object.assign(o,q)}M(!0)}else X("Cannot complete the test: No active session found.")};if(!o||!n)return e.jsxs(j,{sx:{p:3,textAlign:"center"},children:[e.jsx(S,{variant:"h6",children:"Initializing test session..."}),e.jsx(Oe,{sx:{mt:2}}),f&&e.jsx(ee,{severity:"error",sx:{mt:2},children:f})]});const ne=l===100;return e.jsxs(j,{sx:{padding:{xs:.5,sm:1,md:2},maxWidth:"100%",overflowX:"hidden"},children:[e.jsxs(E,{container:!0,spacing:{xs:1,sm:1.5,md:2},children:[e.jsx(E,{item:!0,xs:12,children:e.jsx(is,{currentStep:n,testProgress:l,thresholdCount:u.length})}),e.jsx(E,{item:!0,xs:12,children:e.jsx(j,{sx:{height:"calc(100% + 4%)",width:"100%"},children:e.jsx(us,{thresholds:V,currentStep:n,toneActive:d,onAudiogramClick:te})})}),!ne&&e.jsx(E,{item:!0,xs:12,children:e.jsxs(H,{elevation:3,sx:{p:{xs:1,sm:2},mb:1.5},children:[e.jsxs(j,{sx:{mb:1.5},children:[e.jsxs(j,{sx:{display:"flex",justifyContent:"space-between",alignItems:"center",mb:.5},children:[e.jsxs(S,{variant:"h6",component:"div",sx:{display:"flex",alignItems:"center",fontSize:{xs:"1rem",sm:"1.25rem"}},children:[e.jsx(Ct,{sx:{mr:1,fontSize:{xs:"1.1rem",sm:"1.3rem"}}})," Current Guidance"]}),e.jsx(R,{size:"small",endIcon:B?e.jsx(_e,{}):e.jsx(Ve,{}),onClick:G,children:B?"Hide Details":"Show Details"})]}),e.jsx(ls,{currentGuidance:x,suggestedAction:b,showResponseIndicator:h,patientResponse:c,canStoreThreshold:m,onStoreThreshold:a,onSuggestedAction:L,startTone:i,stopTone:g}),e.jsx(Ue,{in:B,children:e.jsx(j,{sx:{mt:1.5,p:1.5,bgcolor:K(F.palette.primary.light,.1),borderRadius:1},children:e.jsx(ys,{guidance:x,action:b,phase:C,onStoreThreshold:a,canStoreThreshold:m,patientResponded:y,onImplementSuggestion:L,showResponseAlert:h&&!!c})})})]}),e.jsxs(j,{sx:{p:{xs:.5,sm:1}},children:[e.jsxs(S,{variant:"subtitle1",sx:{mb:1,display:"flex",alignItems:"center",fontSize:{xs:"0.9rem",sm:"1rem"}},children:[e.jsx(Ce,{sx:{mr:1,fontSize:"1.2rem"}})," Test Controls"]}),e.jsx(hs,{currentStep:n,toneActive:d,onAdjustLevel:v,onAdjustFrequency:p,startTone:i,stopTone:g,canStoreThreshold:m,onStoreThreshold:a})]})]})}),ne&&e.jsx(E,{item:!0,xs:12,children:e.jsxs(H,{elevation:3,sx:{p:{xs:2,sm:3},mb:2,display:"flex",flexDirection:"column",alignItems:"center",backgroundColor:F.palette.success.light,color:F.palette.success.contrastText},children:[e.jsx(S,{variant:"h5",gutterBottom:!0,children:"Audiogram Test Complete!"}),e.jsx(S,{variant:"body1",sx:{mb:3,textAlign:"center"},children:"You have successfully completed the hearing test. Review the audiogram to see the patient's thresholds."}),e.jsx(R,{variant:"contained",color:"primary",startIcon:e.jsx(Bt,{}),onClick:()=>{if(o&&!o.completed){const w=z.completeSession();w&&w.results&&Object.assign(o,{completed:!0,results:w.results})}M(!0)},sx:{mb:1},children:"View Detailed Results"}),e.jsx(R,{variant:"outlined",onClick:()=>t(o),children:"Return to Dashboard"})]})}),e.jsx(E,{item:!0,xs:12,sx:{display:"flex",justifyContent:"center",mt:{xs:1.5,sm:2},mb:{xs:1,sm:1.5}},children:e.jsx(R,{variant:"contained",color:"primary",size:"large",startIcon:e.jsx(qt,{}),onClick:se,sx:{mx:"auto",minWidth:{xs:"180px",sm:"200px"},backgroundColor:F.palette.success.main,"&:hover":{backgroundColor:F.palette.success.dark}},children:"Complete Audiogram Test"})}),e.jsx(E,{item:!0,xs:12,sx:{display:"flex",justifyContent:"center",mt:.5},children:e.jsx(Z,{title:"Go back",children:e.jsx(oe,{onClick:s,color:"primary",sx:{backgroundColor:F.palette.mode==="dark"?K(F.palette.action.active,.1):"rgba(0, 0, 0, 0.05)","&:hover":{backgroundColor:F.palette.mode==="dark"?K(F.palette.action.active,.2):"rgba(0, 0, 0, 0.1)"}},children:e.jsx(kt,{sx:{transform:"rotate(180deg)"}})})})})]}),e.jsxs(Je,{open:A,onClose:()=>M(!1),maxWidth:"md",fullWidth:!0,children:[e.jsx(Xe,{children:"Patient Audiogram Results"}),e.jsx(Ge,{children:e.jsxs(j,{sx:{p:2},children:[e.jsx(S,{variant:"h6",gutterBottom:!0,children:"Patient Information"}),e.jsxs(E,{container:!0,spacing:2,sx:{mb:3},children:[e.jsxs(E,{item:!0,xs:12,sm:6,children:[e.jsxs(S,{variant:"body2",children:[e.jsx("strong",{children:"Patient ID:"})," ",r.id]}),e.jsxs(S,{variant:"body2",children:[e.jsx("strong",{children:"Name:"})," ",r.name]})]}),e.jsxs(E,{item:!0,xs:12,sm:6,children:[e.jsxs(S,{variant:"body2",children:[e.jsx("strong",{children:"Hearing Loss Type:"})," ",r.hearingLossType.replace("_"," ")]}),e.jsxs(S,{variant:"body2",children:[e.jsx("strong",{children:"Test Date:"})," ",new Date().toLocaleDateString()]})]})]}),e.jsx(S,{variant:"h6",gutterBottom:!0,children:"Your Test Results vs. Actual Thresholds"}),e.jsxs(H,{elevation:1,sx:{p:2,mb:3,bgcolor:"background.paper"},children:[e.jsx(S,{variant:"body2",paragraph:!0,children:"Below is a comparison between the thresholds you measured and the patient's actual thresholds. This feedback helps you improve your audiometric testing skills."}),(o==null?void 0:o.completed)&&(o==null?void 0:o.results)&&e.jsxs(ee,{severity:o.results.falsePositives>5?"warning":"info",sx:{mb:2},children:[e.jsxs(S,{variant:"subtitle2",children:["False Positives: ",o.results.falsePositives||0]}),e.jsxs(S,{variant:"body2",children:["False positives occur when a patient indicates hearing a tone when none was presented. A high number of false positives (",">","5) may indicate an unreliable test subject or a need for clearer instructions."]})]}),e.jsxs(E,{container:!0,spacing:2,children:[e.jsxs(E,{item:!0,xs:12,md:6,children:[e.jsxs(S,{variant:"subtitle2",gutterBottom:!0,children:["Left Ear Thresholds ",r.thresholds.some(w=>w.ear==="left"&&w.testType==="bone")?"(>)":"(O)"]}),e.jsxs(ue,{size:"small",children:[e.jsx(we,{children:e.jsxs(U,{children:[e.jsx(k,{children:"Frequency (Hz)"}),e.jsx(k,{children:"Your Result (dB)"}),e.jsx(k,{children:"Actual (dB)"}),e.jsx(k,{children:"Difference"})]})}),e.jsx(pe,{children:u.filter(w=>w.ear==="left").map(w=>{const q=r.thresholds.find(re=>re.ear==="left"&&re.frequency===w.frequency),I=q?w.hearingLevel-q.hearingLevel:0;return e.jsxs(U,{children:[e.jsx(k,{children:w.frequency}),e.jsx(k,{children:w.hearingLevel}),e.jsx(k,{children:q?q.hearingLevel:"N/A"}),e.jsx(k,{sx:{color:Math.abs(I)<=5?"success.main":Math.abs(I)<=10?"warning.main":"error.main"},children:I>0?`+${I}`:I})]},`left-${w.frequency}`)})})]})]}),e.jsxs(E,{item:!0,xs:12,md:6,children:[e.jsxs(S,{variant:"subtitle2",gutterBottom:!0,children:["Right Ear Thresholds ",r.thresholds.some(w=>w.ear==="right"&&w.testType==="bone")?"(<)":"(X)"]}),e.jsxs(ue,{size:"small",children:[e.jsx(we,{children:e.jsxs(U,{children:[e.jsx(k,{children:"Frequency (Hz)"}),e.jsx(k,{children:"Your Result (dB)"}),e.jsx(k,{children:"Actual (dB)"}),e.jsx(k,{children:"Difference"})]})}),e.jsx(pe,{children:u.filter(w=>w.ear==="right").map(w=>{const q=r.thresholds.find(re=>re.ear==="right"&&re.frequency===w.frequency),I=q?w.hearingLevel-q.hearingLevel:0;return e.jsxs(U,{children:[e.jsx(k,{children:w.frequency}),e.jsx(k,{children:w.hearingLevel}),e.jsx(k,{children:q?q.hearingLevel:"N/A"}),e.jsx(k,{sx:{color:Math.abs(I)<=5?"success.main":Math.abs(I)<=10?"warning.main":"error.main"},children:I>0?`+${I}`:I})]},`right-${w.frequency}`)})})]})]})]})]})]})}),e.jsxs(Qe,{children:[e.jsx(R,{onClick:()=>M(!1),children:"Close"}),e.jsx(R,{variant:"contained",color:"primary",onClick:()=>{if(M(!1),o&&!o.completed){const w=z.completeSession();w?(console.log("Session completed with results:",w.results),t(w)):(console.warn("Failed to complete session, using current session instead"),t(o))}else t(o)},children:"Finish"})]})]}),f&&e.jsx(ze,{open:!!f,autoHideDuration:6e3,onClose:()=>{},children:e.jsx(ee,{severity:"error",children:f})}),_&&e.jsx(ze,{open:!!_,autoHideDuration:6e3,onClose:()=>{},children:e.jsx(ee,{severity:"error",children:_})})]})},vs=T.lazy(()=>Pe(()=>import("./ChartJSImports-DUe47CBm.js"),__vite__mapDeps([0,1,2,3,4,5]))),js=T.lazy(()=>Pe(()=>import("./chart-BbBqQtpH.js").then(r=>r.i),__vite__mapDeps([5,1,2,3,4])).then(r=>({default:r.Scatter}))),de=[125,250,500,750,1e3,1500,2e3,3e3,4e3,6e3,8e3],Ss=[-10,0,10,20,30,40,50,60,70,80,90,100,110,120],Ts=({thresholds:r,width:t=600,height:s=400,showLegend:o=!0,title:n="Audiogram",compareThresholds:l,currentFrequency:d,currentLevel:c,toneActive:h=!1,onPositionClick:y,interactive:f=!1})=>{const C=T.useRef(null),[x,b]=T.useState(!1),[m,u]=T.useState(!1);T.useEffect(()=>()=>{C.current&&C.current.destroy()},[]),T.useEffect(()=>{let p=null;return h&&d&&c!==void 0?p=setInterval(()=>{b(a=>!a)},200):b(!1),()=>{p&&clearInterval(p)}},[h,d,c]);const i=()=>{const p=[];return p.push({label:"Right Ear (Air)",data:r.filter(a=>a.ear==="right"&&a.testType==="air").map(a=>({x:a.frequency,y:a.hearingLevel,responseStatus:a.responseStatus})),pointStyle:"circle",borderColor:"red",backgroundColor:"red",borderWidth:2,pointRadius:6,showLine:!0,tension:.1}),p.push({label:"Left Ear (Air)",data:r.filter(a=>a.ear==="left"&&a.testType==="air").map(a=>({x:a.frequency,y:a.hearingLevel,responseStatus:a.responseStatus})),pointStyle:"crossRot",borderColor:"blue",backgroundColor:"blue",borderWidth:2,pointRadius:6,showLine:!0,tension:.1}),p.push({label:"Right Ear (Bone)",data:r.filter(a=>a.ear==="right"&&a.testType==="bone").map(a=>({x:a.frequency,y:a.hearingLevel,responseStatus:a.responseStatus})),pointStyle:"triangle",borderColor:"red",backgroundColor:"rgba(255, 0, 0, 0.2)",borderWidth:2,pointRadius:6,showLine:!0,tension:.1}),p.push({label:"Left Ear (Bone)",data:r.filter(a=>a.ear==="left"&&a.testType==="bone").map(a=>({x:a.frequency,y:a.hearingLevel,responseStatus:a.responseStatus})),pointStyle:"triangle",borderColor:"blue",backgroundColor:"rgba(0, 0, 255, 0.2)",borderWidth:2,pointRadius:6,showLine:!0,tension:.1,rotation:180}),l&&(p.push({label:"Right Ear Air (Expected)",data:l.filter(a=>a.ear==="right"&&a.testType==="air").map(a=>({x:a.frequency,y:a.hearingLevel,responseStatus:a.responseStatus})),pointStyle:"circle",borderColor:"rgba(255, 0, 0, 0.5)",backgroundColor:"rgba(255, 0, 0, 0.5)",borderWidth:1,pointRadius:4,showLine:!0,tension:.1,borderDash:[5,5]}),p.push({label:"Left Ear Air (Expected)",data:l.filter(a=>a.ear==="left"&&a.testType==="air").map(a=>({x:a.frequency,y:a.hearingLevel,responseStatus:a.responseStatus})),pointStyle:"crossRot",borderColor:"rgba(0, 0, 255, 0.5)",backgroundColor:"rgba(0, 0, 255, 0.5)",borderWidth:1,pointRadius:4,showLine:!0,tension:.1,borderDash:[5,5]}),p.push({label:"Right Ear Bone (Expected)",data:l.filter(a=>a.ear==="right"&&a.testType==="bone").map(a=>({x:a.frequency,y:a.hearingLevel,responseStatus:a.responseStatus})),pointStyle:"triangle",borderColor:"rgba(255, 0, 0, 0.5)",backgroundColor:"rgba(255, 0, 0, 0.2)",borderWidth:1,pointRadius:4,showLine:!0,tension:.1,borderDash:[5,5]}),p.push({label:"Left Ear Bone (Expected)",data:l.filter(a=>a.ear==="left"&&a.testType==="bone").map(a=>({x:a.frequency,y:a.hearingLevel,responseStatus:a.responseStatus})),pointStyle:"triangle",borderColor:"rgba(0, 0, 255, 0.5)",backgroundColor:"rgba(0, 0, 255, 0.2)",borderWidth:1,pointRadius:4,showLine:!0,tension:.1,borderDash:[5,5],rotation:180})),d!==void 0&&c!==void 0&&(p.push({label:"Current Frequency",data:[{x:d,y:-10},{x:d,y:120}],backgroundColor:"rgba(255, 165, 0, 0.5)",borderColor:x?"rgba(255, 165, 0, 1)":"rgba(255, 165, 0, 0.7)",borderWidth:x?3:1,borderDash:[5,5],pointRadius:0,showLine:!0,tension:0}),p.push({label:"Current Level",data:[{x:125,y:c},{x:8e3,y:c}],backgroundColor:"rgba(255, 165, 0, 0.5)",borderColor:x?"rgba(255, 165, 0, 1)":"rgba(255, 165, 0, 0.7)",borderWidth:x?3:1,borderDash:[5,5],pointRadius:0,showLine:!0,tension:0}),p.push({label:"Current Position",data:[{x:d,y:c}],backgroundColor:x?"rgba(255, 165, 0, 1)":"rgba(255, 165, 0, 0.7)",borderColor:x?"rgb(255, 165, 0)":"rgba(255, 100, 0, 0.7)",pointStyle:"circle",pointRadius:x?9:7,borderWidth:2,showLine:!1})),{labels:de.map(a=>a.toString()),datasets:p}},g={responsive:!0,maintainAspectRatio:!1,scales:{x:{type:"logarithmic",position:"bottom",title:{display:!0,text:"Frequency (Hz)"},ticks:{callback:function(p,a){return de.includes(p)?p:""},autoSkip:!1},min:100,max:1e4,grid:{display:!0,color:p=>de.includes(p.tick.value)?"rgba(0, 0, 0, 0.1)":"rgba(0, 0, 0, 0)"}},y:{reverse:!0,title:{display:!0,text:"Hearing Level (dB HL)"},min:-10,max:120,ticks:{callback:function(p,a){return Ss.includes(p)?p:""},stepSize:10},grid:{color:p=>p.tick.value===0?"rgba(0, 0, 0, 0.5)":p.tick.value%20===0?"rgba(0, 0, 0, 0.2)":"rgba(0, 0, 0, 0.1)"}}},plugins:{legend:{display:!1,position:"bottom"},title:{display:!!n,text:n},tooltip:{callbacks:{label:p=>{const a=p.raw;return`${p.dataset.label}: ${a.x} Hz, ${a.y} dB HL`}}}}},v=p=>{if(!f||!y||!C.current||h)return;const a=C.current,$=a.canvas.getBoundingClientRect(),B=p.clientX-$.left,D=p.clientY-$.top,A=a.scales.x,M=a.scales.y;if(!A||!M)return;const _=A.getValueForPixel(B),X=M.getValueForPixel(D);if(_===void 0||X===void 0)return;const F=de.reduce((V,se)=>Math.abs(se-_)<Math.abs(V-_)?se:V),te=Math.round(X/5)*5,G=Math.max(-10,Math.min(120,te));y(F,G)};return e.jsx(j,{sx:{flexGrow:1,position:"relative",height:"100%",width:"100%",cursor:f&&!h?"crosshair":"default"},children:e.jsxs(T.Suspense,{fallback:e.jsx(j,{sx:{display:"flex",justifyContent:"center",alignItems:"center",height:"100%",width:"100%"},children:e.jsx($t,{})}),children:[e.jsx(vs,{onLoad:()=>u(!0)}),m&&e.jsx(js,{data:i(),options:g,ref:C,onClick:v})]})})},je=n=>{var l=n,{children:r,value:t,index:s}=l,o=Ie(l,["children","value","index"]);return e.jsx("div",Q(P({role:"tabpanel",hidden:t!==s,id:`results-tabpanel-${s}`,"aria-labelledby":`results-tab-${s}`},o),{children:t===s&&e.jsx(j,{sx:{p:3},children:r})}))},Ls=({session:r,onNewTest:t})=>{const[s,o]=T.useState(0),[n,l]=T.useState(!1);T.useRef(null),T.useRef(null);const d=le(),c=r.results;if(!c)return e.jsxs(j,{sx:{p:3},children:[e.jsx(ee,{severity:"error",sx:{mb:3},children:"Test results are missing or incomplete. Please try running the test again."}),e.jsx(R,{variant:"contained",onClick:t,children:"Return to Patient Selection"})]});const h=Be.getPatientById(r.patientId),y=()=>{if(!h)return{accuracy:0,exactMatch:0,within5dB:0,within10dB:0,missedThresholds:0};if(!c||!c.userThresholds)return console.error("Missing results or userThresholds:",c),{accuracy:0,exactMatch:0,within5dB:0,within10dB:0,missedThresholds:0};const u=c.userThresholds,i=h.thresholds;let g=0,v=0,p=0,a=0;u.forEach(B=>{const D=i.find(A=>A.frequency===B.frequency&&A.ear===B.ear&&A.testType===B.testType);if(D&&B.responseStatus==="threshold"&&D.responseStatus==="threshold"){const A=Math.abs(B.hearingLevel-D.hearingLevel);a++,A===0?(g++,v++,p++):A<=5?(v++,p++):A<=10&&p++}});const L=i.filter(B=>B.responseStatus==="threshold").length,$=u.filter(B=>B.responseStatus==="threshold").length;return{accuracy:a>0?Math.round(v/a*100):0,exactMatch:a>0?Math.round(g/a*100):0,within5dB:a>0?Math.round(v/a*100):0,within10dB:a>0?Math.round(p/a*100):0,missedThresholds:L-$}};let f;try{f=y()}catch(u){console.error("Error calculating metrics:",u),f={accuracy:0,exactMatch:0,within5dB:0,within10dB:0,missedThresholds:0}}const C=(u,i)=>{o(i)},x=()=>Re(void 0,null,function*(){l(!0);try{const u=document.getElementById("test-results-container");if(!u){console.error("Results element not found"),l(!1);return}const i=yield Yt(u,{scale:2}),g=i.toDataURL("image/png"),v=new _t({orientation:"portrait",unit:"mm",format:"a4"}),p=v.internal.pageSize.getWidth(),a=v.internal.pageSize.getHeight(),L=i.width,$=i.height,B=Math.min(p/L,a/$),D=(p-L*B)/2;v.addImage(g,"PNG",D,10,L*B,$*B),v.save(`audiometry_results_${new Date().toISOString().slice(0,10)}.pdf`)}catch(u){console.error("Error exporting to PDF:",u)}l(!1)}),m=(u=>u>=90?{color:"success",label:"Excellent",icon:e.jsx(Ye,{})}:u>=75?{color:"info",label:"Good",icon:e.jsx(Et,{})}:u>=60?{color:"warning",label:"Fair",icon:e.jsx(Dt,{})}:{color:"error",label:"Needs Improvement",icon:e.jsx(Ht,{})})(f.accuracy);return e.jsx(H,{elevation:3,sx:{borderRadius:2,maxWidth:1200,mx:"auto"},id:"test-results-container",children:e.jsxs(j,{sx:{p:{xs:1,sm:2,md:3},mb:4},children:[e.jsx(S,{variant:"h4",gutterBottom:!0,children:"Test Results"}),e.jsxs(S,{variant:"subtitle1",color:"text.secondary",gutterBottom:!0,children:[h==null?void 0:h.name," | ",new Date(c.timestamp).toLocaleString()]}),e.jsx(he,{sx:{my:2}}),e.jsxs(j,{sx:{width:"100%"},children:[e.jsx(j,{sx:{borderBottom:1,borderColor:"divider"},children:e.jsxs(It,{value:s,onChange:C,"aria-label":"results tabs",children:[e.jsx(ye,{label:"Overview",id:"results-tab-0","aria-controls":"results-tabpanel-0"}),e.jsx(ye,{label:"Audiogram",id:"results-tab-1","aria-controls":"results-tabpanel-1"}),e.jsx(ye,{label:"Technique Analysis",id:"results-tab-2","aria-controls":"results-tabpanel-2"})]})}),e.jsx(je,{value:s,index:0,children:e.jsxs(j,{sx:{display:"flex",flexDirection:{xs:"column",md:"row"},gap:3},children:[e.jsxs(j,{sx:{flex:1},children:[e.jsxs(H,{elevation:2,sx:{p:2,mb:3,bgcolor:d.palette.mode==="dark"?d.palette.background.paper:"#f8f9fa"},children:[e.jsx(S,{variant:"h6",gutterBottom:!0,children:"Test Summary"}),e.jsxs(S,{variant:"body2",gutterBottom:!0,children:[e.jsx("strong",{children:"Patient ID:"})," ",r.patientId]}),e.jsxs(S,{variant:"body2",gutterBottom:!0,children:[e.jsx("strong",{children:"Test Duration:"})," ",c.testDuration," seconds"]}),e.jsxs(S,{variant:"body2",gutterBottom:!0,children:[e.jsx("strong",{children:"Tested Frequencies:"})," ",c.userThresholds.filter(u=>u.responseStatus==="threshold").length]}),e.jsxs(S,{variant:"body2",gutterBottom:!0,children:[e.jsx("strong",{children:"Hearing Loss Type:"})," ",h==null?void 0:h.hearingLossType.replace("_"," ")]})]}),e.jsxs(H,{elevation:2,sx:{p:2,mb:3},children:[e.jsxs(j,{sx:{display:"flex",justifyContent:"space-between",alignItems:"center",mb:2},children:[e.jsx(S,{variant:"h6",children:"Accuracy Rating"}),e.jsx(Y,{label:m.label,color:m.color,icon:m.icon,sx:{fontWeight:"bold"}})]}),e.jsx(Ee,{children:e.jsx(ue,{size:"small",children:e.jsxs(pe,{children:[e.jsxs(U,{children:[e.jsx(k,{children:e.jsx("strong",{children:"Overall Accuracy"})}),e.jsxs(k,{align:"right",children:[f.accuracy,"%"]})]}),e.jsxs(U,{children:[e.jsx(k,{children:"Exact Matches"}),e.jsxs(k,{align:"right",children:[f.exactMatch,"%"]})]}),e.jsxs(U,{children:[e.jsx(k,{children:"Within 5 dB"}),e.jsxs(k,{align:"right",children:[f.within5dB,"%"]})]}),e.jsxs(U,{children:[e.jsx(k,{children:"Within 10 dB"}),e.jsxs(k,{align:"right",children:[f.within10dB,"%"]})]}),e.jsxs(U,{children:[e.jsx(k,{children:"Missed Thresholds"}),e.jsx(k,{align:"right",children:f.missedThresholds})]})]})})})]})]}),e.jsxs(j,{sx:{flex:1},children:[c.technicalErrors.length>0&&e.jsxs(ee,{severity:"warning",sx:{mb:3},children:[e.jsx(be,{children:"Technical Errors Detected"}),e.jsx("ul",{style:{margin:0,paddingLeft:20},children:c.technicalErrors.map((u,i)=>e.jsx("li",{children:u},i))})]}),e.jsxs(H,{elevation:2,sx:{p:2},children:[e.jsx(S,{variant:"h6",gutterBottom:!0,children:"Educational Notes"}),e.jsxs(S,{variant:"body2",paragraph:!0,children:[(h==null?void 0:h.hearingLossType)==="normal"&&"This patient has normal hearing across all frequencies tested. Key indicators include thresholds better than 25dB HL across the spectrum.",(h==null?void 0:h.hearingLossType)==="conductive"&&"This patient shows a conductive hearing loss pattern, characterized by air-bone gaps. This indicates a problem in the outer or middle ear affecting sound transmission.",(h==null?void 0:h.hearingLossType)==="sensorineural"&&"This patient has a sensorineural hearing loss pattern. Air and bone conduction thresholds are similar, indicating the loss is in the cochlea or neural pathway.",(h==null?void 0:h.hearingLossType)==="mixed"&&"This patient shows a mixed hearing loss with both conductive and sensorineural components. Note the elevated bone conduction thresholds and additional air-bone gaps.",(h==null?void 0:h.hearingLossType)==="asymmetrical"&&"This patient has asymmetrical hearing loss with different thresholds between the left and right ears. This pattern requires additional diagnostic testing and may indicate unilateral pathology."]}),e.jsx(S,{variant:"subtitle2",gutterBottom:!0,children:"Hughson-Westlake Protocol Reminder:"}),e.jsxs("ul",{children:[e.jsx("li",{children:"Begin testing at 1000 Hz in the better ear"}),e.jsx("li",{children:"Present tones for 1-2 seconds with varied intervals"}),e.jsx("li",{children:"Use 10 dB steps down after response until no response"}),e.jsx("li",{children:"Use 5 dB steps up until response"}),e.jsx("li",{children:"Threshold is the lowest level with 2 out of 3 responses"}),e.jsx("li",{children:"Proceed with 2000, 4000, 8000, then 500, 250 Hz"}),e.jsx("li",{children:"Retest 1000 Hz to verify reliability"})]})]})]})]})}),e.jsx(je,{value:s,index:1,children:e.jsxs(j,{sx:{display:"flex",flexDirection:"column",alignItems:"center"},children:[e.jsx(Ts,{thresholds:c.userThresholds,compareThresholds:h==null?void 0:h.thresholds,height:500,width:800,title:"Test Results vs. Actual Thresholds"}),e.jsx(S,{variant:"subtitle2",color:"text.secondary",sx:{mt:2},children:"Solid lines: Your test results | Dashed lines: Actual patient thresholds"}),e.jsxs(ee,{severity:"info",sx:{mt:3,width:"100%"},children:[e.jsx(be,{children:"Audiogram Interpretation Guide"}),e.jsxs(S,{variant:"body2",children:[e.jsx("strong",{children:"Normal hearing:"})," Thresholds better than 25 dB HL",e.jsx("br",{}),e.jsx("strong",{children:"Mild hearing loss:"})," 26-40 dB HL",e.jsx("br",{}),e.jsx("strong",{children:"Moderate hearing loss:"})," 41-55 dB HL",e.jsx("br",{}),e.jsx("strong",{children:"Moderately severe hearing loss:"})," 56-70 dB HL",e.jsx("br",{}),e.jsx("strong",{children:"Severe hearing loss:"})," 71-90 dB HL",e.jsx("br",{}),e.jsx("strong",{children:"Profound hearing loss:"})," Greater than 90 dB HL"]})]})]})}),e.jsxs(je,{value:s,index:2,children:[e.jsx(Ee,{component:H,elevation:2,children:e.jsxs(ue,{sx:{minWidth:650},children:[e.jsx(we,{children:e.jsxs(U,{children:[e.jsx(k,{children:"Frequency (Hz)"}),e.jsx(k,{children:"Ear"}),e.jsx(k,{children:"Test Type"}),e.jsx(k,{children:"Your Result (dB HL)"}),e.jsx(k,{children:"Actual Threshold (dB HL)"}),e.jsx(k,{children:"Difference"}),e.jsx(k,{children:"Status"})]})}),e.jsx(pe,{children:c.userThresholds.map((u,i)=>{const g=h==null?void 0:h.thresholds.find(a=>a.frequency===u.frequency&&a.ear===u.ear&&a.testType===u.testType);let v=0,p="Untested";return g&&u.responseStatus==="threshold"&&g.responseStatus==="threshold"?(v=Math.abs(u.hearingLevel-g.hearingLevel),v===0?p="Exact Match":v<=5?p="Within 5 dB":v<=10?p="Within 10 dB":p="Significant Deviation"):u.responseStatus==="threshold"&&(p="Tested"),e.jsxs(U,{children:[e.jsx(k,{children:u.frequency}),e.jsx(k,{children:u.ear==="left"?"Left":"Right"}),e.jsx(k,{children:u.testType.replace("_"," ")}),e.jsx(k,{children:u.hearingLevel}),e.jsx(k,{children:(g==null?void 0:g.hearingLevel)||"N/A"}),e.jsx(k,{children:u.responseStatus==="threshold"?`${v} dB`:"N/A"}),e.jsx(k,{children:e.jsx(Y,{label:p,size:"small",color:p==="Exact Match"?"success":p==="Within 5 dB"?"primary":p==="Within 10 dB"?"info":p==="Significant Deviation"?"error":"default"})})]},i)})})]})}),c.technicalErrors.length>0&&e.jsxs(H,{elevation:2,sx:{mt:3,p:2},children:[e.jsx(S,{variant:"h6",gutterBottom:!0,children:"Technical Errors Analysis"}),e.jsx("ul",{children:c.technicalErrors.map((u,i)=>e.jsx("li",{children:e.jsx(S,{variant:"body2",children:u})},i))}),e.jsxs(ee,{severity:"info",sx:{mt:2},children:[e.jsx(be,{children:"Improvement Suggestions"}),e.jsxs(S,{variant:"body2",children:[c.technicalErrors.some(u=>u.includes("Skipped"))&&`• Ensure all frequencies are tested for complete assessment
`,c.technicalErrors.some(u=>u.includes("Insufficient"))&&`• Collect at least 3 responses at threshold level
`,c.technicalErrors.some(u=>u.includes("too high"))&&`• Start at more appropriate levels (typically 30-40 dB HL)
`,"Practice proper step sizes: 10 dB down after response, 5 dB up until response"]})]})]})]})]}),e.jsx(he,{sx:{my:3}}),e.jsxs(Ke,{direction:{xs:"column",sm:"row"},spacing:2,justifyContent:"space-between",children:[e.jsx(j,{children:e.jsx(R,{variant:"contained",color:"primary",onClick:t,children:"Start New Test"})}),e.jsxs(j,{sx:{display:"flex",gap:2},children:[e.jsx(R,{variant:"outlined",startIcon:e.jsx(Rt,{}),disabled:!0,children:"Share Results"}),e.jsx(R,{variant:"outlined",startIcon:e.jsx(zt,{}),onClick:x,disabled:n,children:n?"Exporting...":"Export PDF"})]})]})]})})},Is=()=>{const[r,t]=T.useState([]),[s,o]=T.useState([]),[n,l]=T.useState(null),[d,c]=T.useState(""),[h,y]=T.useState("all"),[f,C]=T.useState("all"),[x,b]=T.useState(!1),[m,u]=T.useState(null),[i,g]=T.useState(1),[v]=T.useState(6),[p,a]=T.useState(!1),L=le();Ne(L.breakpoints.down("md")),T.useEffect(()=>{const q=Be.getAllPatients();t(q),o(q)},[]),T.useEffect(()=>{let q=r;d&&(q=q.filter(I=>I.name.toLowerCase().includes(d.toLowerCase())||I.description.toLowerCase().includes(d.toLowerCase())||I.id.toLowerCase().includes(d.toLowerCase()))),h!=="all"&&(q=q.filter(I=>I.difficulty===h)),f!=="all"&&(q=q.filter(I=>I.hearingLossType===f)),o(q),g(1)},[d,h,f,r]);const $=q=>{c(q.target.value)},B=q=>{y(q.target.value)},D=q=>{C(q.target.value)},A=q=>{l(q)},M=()=>{b(!0),u(null)},_=()=>{b(!1),u(null)},X=q=>{b(!1),u(q)},F=()=>{u(null),l(null)},te=(q,I)=>{g(I)},G=i*v,V=G-v,se=s.slice(V,G),ne=Math.ceil(s.length/v),w=()=>{c(""),y("all"),C("all"),a(!1)};return m?e.jsx(ve,{maxWidth:"lg",sx:{py:4},children:e.jsx(Ls,{session:m,onNewTest:F})}):x&&n?e.jsx(ve,{maxWidth:"lg",sx:{py:4},children:e.jsx(bs,{patient:n,onComplete:X,onCancel:_})}):e.jsxs(ve,{maxWidth:"lg",sx:{mt:{xs:2,md:4},mb:6},children:[e.jsx(S,{variant:"h4",gutterBottom:!0,children:"Virtual Patients"}),e.jsx(S,{variant:"body1",paragraph:!0,color:"text.secondary",children:"Select a virtual patient to practice your audiometry skills. Each patient has a unique hearing profile that simulates different types of hearing loss."}),e.jsx(j,{sx:{mb:{xs:2,md:4}},children:e.jsxs(E,{container:!0,spacing:{xs:1,md:2},alignItems:"center",children:[e.jsx(E,{item:!0,xs:12,md:6,children:e.jsx(Wt,{fullWidth:!0,variant:"outlined",placeholder:"Search patients...",value:d,onChange:$,InputProps:{startAdornment:e.jsx(At,{position:"start",children:e.jsx(Mt,{})})},size:"small",sx:{mb:{xs:1,md:0}}})}),e.jsx(E,{item:!0,xs:12,md:6,children:e.jsxs(j,{sx:{display:"flex",gap:{xs:1,md:2},justifyContent:{xs:"space-between",md:"flex-end"},flexWrap:"wrap"},children:[e.jsx(R,{variant:"outlined",startIcon:e.jsx(Ft,{}),onClick:()=>a(!0),size:"small",sx:{flex:{xs:1,sm:"initial"}},children:"Filters"}),n?e.jsx(R,{variant:"contained",color:"primary",startIcon:e.jsx(De,{}),onClick:M,size:"small",sx:{flex:{xs:1,sm:"initial"}},children:"Start Testing"}):e.jsx(R,{variant:"outlined",color:"secondary",startIcon:e.jsx(Pt,{}),disabled:!0,size:"small",sx:{flex:{xs:1,sm:"initial"}},children:"Add Patient"})]})})]})}),(h!=="all"||f!=="all")&&e.jsx(j,{sx:{mb:3},children:e.jsxs(Ke,{direction:{xs:"column",sm:"row"},spacing:1,alignItems:{xs:"flex-start",sm:"center"},sx:{flexWrap:"wrap",gap:1},children:[e.jsx(S,{variant:"body2",children:"Active Filters:"}),e.jsxs(j,{sx:{display:"flex",flexWrap:"wrap",gap:1},children:[h!=="all"&&e.jsx(Y,{label:`Difficulty: ${h}`,onDelete:()=>y("all"),size:"small",color:"primary"}),f!=="all"&&e.jsx(Y,{label:`Type: ${f.replace("_"," ")}`,onDelete:()=>C("all"),size:"small",color:"secondary"}),e.jsx(R,{size:"small",onClick:w,children:"Clear All"})]})]})}),e.jsxs(Je,{open:p,onClose:()=>a(!1),fullWidth:!0,maxWidth:"xs",children:[e.jsx(Xe,{children:"Filter Patients"}),e.jsxs(Ge,{sx:{pt:1},children:[e.jsxs(He,{fullWidth:!0,margin:"normal",children:[e.jsx(We,{children:"Difficulty Level"}),e.jsxs(Ae,{value:h,onChange:B,label:"Difficulty Level",children:[e.jsx(J,{value:"all",children:"All Levels"}),e.jsx(J,{value:"beginner",children:"Beginner"}),e.jsx(J,{value:"intermediate",children:"Intermediate"}),e.jsx(J,{value:"advanced",children:"Advanced"})]})]}),e.jsxs(He,{fullWidth:!0,margin:"normal",children:[e.jsx(We,{children:"Hearing Loss Type"}),e.jsxs(Ae,{value:f,onChange:D,label:"Hearing Loss Type",children:[e.jsx(J,{value:"all",children:"All Types"}),e.jsx(J,{value:"normal",children:"Normal Hearing"}),e.jsx(J,{value:"conductive",children:"Conductive"}),e.jsx(J,{value:"sensorineural",children:"Sensorineural"}),e.jsx(J,{value:"mixed",children:"Mixed"}),e.jsx(J,{value:"asymmetrical",children:"Asymmetrical"})]})]})]}),e.jsxs(Qe,{children:[e.jsx(R,{onClick:w,children:"Reset"}),e.jsx(R,{onClick:()=>a(!1),color:"primary",children:"Apply"})]})]}),e.jsx(he,{sx:{mb:{xs:2,md:4}}}),s.length>0?e.jsxs(e.Fragment,{children:[e.jsx(E,{container:!0,spacing:{xs:1,sm:2,md:3},children:se.map(q=>e.jsx(E,{item:!0,xs:12,sm:6,md:4,children:e.jsx(Gt,{patient:q,onSelect:A,selected:(n==null?void 0:n.id)===q.id})},q.id))}),e.jsx(j,{sx:{display:"flex",justifyContent:"center",mt:{xs:2,md:4}},children:e.jsx(Nt,{count:ne,page:i,onChange:te,color:"primary",showFirstButton:!0,showLastButton:!0,size:"small"})})]}):e.jsxs(H,{elevation:0,sx:{p:{xs:2,md:4},textAlign:"center",bgcolor:L.palette.mode==="dark"?K(L.palette.background.paper,.6):"#f5f5f5",borderRadius:2},children:[e.jsx(S,{variant:"h6",gutterBottom:!0,children:"No matching patients found"}),e.jsx(S,{variant:"body2",color:"text.secondary",children:"Try adjusting your search criteria or filters to find a patient."}),e.jsx(R,{variant:"outlined",sx:{mt:2},onClick:w,children:"Clear All Filters"})]}),n&&e.jsxs(H,{elevation:3,sx:{mt:{xs:2,md:4},p:{xs:2,md:3},bgcolor:L.palette.mode==="dark"?L.palette.background.paper:"#f9f9f9",borderRadius:2,border:`1px solid ${L.palette.divider}`},children:[e.jsxs(S,{variant:"h5",gutterBottom:!0,children:["Selected Patient: ",n.name]}),e.jsx(S,{variant:"body1",paragraph:!0,children:n.description}),e.jsxs(j,{sx:{display:"flex",gap:1,mb:2,flexWrap:"wrap"},children:[e.jsx(Y,{label:`Difficulty: ${n.difficulty}`,color:n.difficulty==="beginner"?"success":n.difficulty==="intermediate"?"warning":"error"}),e.jsx(Y,{label:`Type: ${n.hearingLossType.replace("_"," ")}`,color:"secondary"})]}),e.jsx(R,{variant:"contained",color:"primary",startIcon:e.jsx(De,{}),onClick:M,size:"large",fullWidth:!0,sx:{display:{xs:"flex",md:"inline-flex"},width:{xs:"100%",md:"auto"}},children:"Begin Audiometry Test"})]})]})};export{Is as default};
function __vite__mapDeps(indexes) {
  if (!__vite__mapDeps.viteFileDeps) {
    __vite__mapDeps.viteFileDeps = ["assets/ChartJSImports-DUe47CBm.js","assets/react-vendor-Dgc981fj.js","assets/mui-BPTcmYo2.js","assets/vendor-QrZtzWVC.js","assets/three-CboCXHlv.js","assets/chart-BbBqQtpH.js"]
  }
  return indexes.map((i) => __vite__mapDeps.viteFileDeps[i])
}